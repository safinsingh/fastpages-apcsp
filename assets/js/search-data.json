{
  
    
        "post0": {
            "title": "DevOps Lesson",
            "content": "import socket # Change the following host and see what IP it prints! host = &quot;google.com&quot; ip = socket.gethostbyname(host) print(ip) . with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.connect((ip, 80)) print(&quot;Successfully connected!&quot;) . Check-In . What is an IP address? | What is a TCP port? | with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.connect((ip, 80)) # Send a GET request to &quot;/&quot; s.sendall(b&quot;GET / HTTP/1.1 r n r n&quot;) # Recieve &amp; print 2048 bytes of data data = s.recv(2048) print(data.decode()) . import requests # Change the URL to whatever you&#39;d like response = requests.get(&quot;https://google.com&quot;) print(&quot;Status code:&quot;, response.status_code) print(&quot;Headers:&quot;, response.headers) print(&quot;Response text:&quot;, response.text[:100]) # Add a line to print the &quot;Content-Type&quot; header of the response # Try an image URL! . NGINX . aws = &quot;3.130.255.192&quot; response = requests.get(&quot;http://&quot; + aws) print(response.text) . Configuration . server { // Listen on virtual &quot;port 80&quot; listen 80; listen [::]:80; server_name 3.130.255.192; location / { // Inform server about original client proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; // Forward all requests transparently to the server running on our computer proxy_pass http://localhost:9099; } } . Load Balancing . upstream example.com { server server1.example.com; server server1.example.com; } . HTTP Headers . server { add_header X-Cool-Header &quot;I love APCSP!&quot;; location /pages { add_header X-Cooler-Header &quot;This is my secret header!&quot;; } } . Check In . Research 1 HTTP header and describe, in detail, its purpose. | Write a line in a sample NGINX configuration that will add that specific header to the /information location | Explain the purpose of the load balancing performed by NGINX | Modify the following code block to obtain the value of the secret header on /products of the AWS site | aws = &quot;3.130.255.192&quot; response = requests.get(&quot;http://&quot; + aws+ &quot;/products&quot;) print(&quot;The secret header is:&quot;, &quot;...&quot;) . Hacks . Complete the above check-in questions and change the hosts (0.1) | Complete the above code-segment to retrieve the secret header (0.1) | . Bonus (0.05) . Create a diagram showing the layers of abstraction that allow us to use HTTP (IP, TCP, etc.) . CORS Hacks . Explain what CORS is and what it stands for | Describe how you would be able to implement CORS into your own websites | Describe why you would want to implement CORS into your own websites | How could use CORS to benefit yourself in the future? | Total: 0.2 points . KASM Hacks . What is the purpose of &quot;sudo&quot; when running commands in terminal? | What are some commands which allow us to look at how the storage of a machine is set up as? | What do you think are some alternatives to running &quot;curl -O&quot; to get the zip file for KASM? | What kind of commands do you think the &quot;install.sh&quot; command has and why is it necessary to call it? | Explain in at least 3-4 sentences how deploying KASM is related to/requires other topics talked about in the lesson and/or potential ways to add things mentioned in the lesson to this guide. | Total: 0.2 points . AWS/RDS Hacks . See the setup post . Create your own database in the EC2 I have created (ec2-database-connect) name it with your first and last name (example: aditya-nawandhar) (0.1) | Create a table using the commands on the link provided. (0.1) | using commands from the link provided make columns and rows with test data (can be anything) (example: “name” and “class” are the columns with rows being something like “Aditya” and “Junior”). At least 4 test rows (0.1) | additional points if the data matches CPT (Bonus: 0.05) | . | . Total: 0.3 .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/2023/04/26/devops-lesson.html",
            "relUrl": "/2023/04/26/devops-lesson.html",
            "date": " • Apr 26, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "P4-M 4/24 Big Idea 3",
            "content": "Introduction: Zeen . Hello, my name is zeen and today we will be presenting big idea 3. Our topics include 2d arrays, iteration, and lists and dictionaries. . Objectives . Master the concepts of iteration, list, 2d-arrays, Dictionaries, and APIs . Vocab . Here is some vocab during the lesson, you should be familar with them already no need for me to read these out, now I will pass the speaking off to Kush . Iteration: A process that repates itself | Array: Sometimes called a list, can keep strings and intergers inside it | 2D-Array: A collection of data elements arranged in a grid-like structure with rows and columns | Mutable: the ability to be changed or modified | Key: A Singular identifier that is associated with a certin value | . 1: 2D Array . Tic Tac Toe:Kush Sirohi . What are some examples of 2d Arrays An example of a 2D array is an image with a width and a height. Each row of pixels in the image represents a row in the 2D array. | What is a modern day game that could be classified as a 2D array All video games (Minecraft, for example), use 2D arrays to manage the current framebuffer and display pixels to the computer screen. | . array = [&quot;Hello&quot;, &quot;Hi&quot;, &quot;Whats up&quot;] twoDArray = [[&quot;Name&quot;, &quot;ID&quot;, &quot;Age&quot;], [&quot;Kush&quot;, &quot;1&quot;, &quot;16&quot;], [&quot;Finn&quot;, &quot;2&quot;, &quot;16&quot;]] print(f&quot;This is a normal array: {array}&quot;) print(&quot;This is a 2D array&quot;) for row in twoDArray: print(row) . How I used 2D Arrays (game example) . Describe a 2D array in your own words | . A 2D array is an array of arrays. Indexing the array uses two pairs of square brackets: [][]. . board = [[&#39; &#39;, &#39; &#39;, &#39; &#39;], [&#39; &#39;, &#39; &#39;, &#39; &#39;], [&#39; &#39;, &#39; &#39;, &#39; &#39;]] # Function to print the current state of the game board def print_board(): print(&quot; 0 1 2&quot;) for i in range(3): print(i, end=&#39; &#39;) for j in range(3): print(board[i][j], end=&#39; &#39;) print() # Function to check if a player has won the game def check_win(player): # Check rows for a win for i in range(3): if board[i][0] == player and board[i][1] == player and board[i][2] == player: return True # Check columns for a win for j in range(3): if board[0][j] == player and board[1][j] == player and board[2][j] == player: return True # Check diagonals for a win if board[0][0] == player and board[1][1] == player and board[2][2] == player: return True if board[0][2] == player and board[1][1] == player and board[2][0] == player: return True # If no win condition is met, return False return False # Function to check if the game is a tie def check_tie(): for i in range(3): for j in range(3): if board[i][j] == &#39; &#39;: return False return True # Function to play the game def play_game(): # Initialize player and turn counter player = &#39;X&#39; turns = 0 # Loop until the game is over while True: # Print the current state of the board print_board() # Get the player’s move row = int(input(f&quot;{player}&#39;s turn. Enter row (0-2): &quot;)) col = int(input(f&quot;{player}&#39;s turn. Enter column (0-2): &quot;)) # Check if the move is valid if board[row][col] == &#39; &#39;: board[row][col] = player turns += 1 # Check if the player has won if check_win(player): print_board() print(f&quot;{player} wins!&quot;) return # Check if the game is a tie if check_tie(): print_board() print(&quot;It&#39;s a tie!&quot;) return # Switch players player = &#39;O&#39; if player == &#39;X&#39; else &#39;X&#39; else: print(&quot;That space is already taken. Try again.&quot;) # Start the game play_game() . 2: Iteration . Robot Game:Finn Carpenter- What is the defenition of iteration in your own words Iteration is the action of looping through a set of items and performing an action on each of them . times = 0 numbers = [1, 2, 3, 4, 5] ## Loops for i in range(5): print(&quot;hi&quot;) while times &lt;= 5: print(&quot;hello&quot;) times = times + 1 ## Function with a parameters def print_numbers(x): for num in x: print(num) print_numbers(numbers) . Iteration Game . Link to the game | Play the levels (only play the first 2 in class) Levels completed in ticket | Explain how the game relates to itertation The game relates to iteration because certain tasks such as moving the robot up, down, left, and right are repeated over and over again. | . How I used iteration (game example) . What parts of the code use iteration The for loop on line 16 shows iteration because it loops until the looper variable is reached by l. | . function run() { // Read input values from the HTML document and convert them to integers. UPinput = parseInt(document.getElementById(&quot;up&quot;).value); DOWNinput = parseInt(document.getElementById(&quot;down&quot;).value); LEFTinput = parseInt(document.getElementById(&quot;left&quot;).value); RIGHTinput = parseInt(document.getElementById(&quot;right&quot;).value); looper = parseInt(document.getElementById(&quot;loop&quot;).value); runner.style.opacity = 0; // Create an array to hold the movements. let movements = []; // Push &#39;up&#39; movements to the array. for (let l = 0; l &lt; looper; l++) { for (let k = 0; k &lt; UPinput; k++) { movements.push(up); } // Push &#39;down&#39; movements to the array. for (let i = 0; i &lt; DOWNinput; i++) { movements.push(down); } // Push &#39;left&#39; movements to the array. for (let a = 0; a &lt; LEFTinput; a++) { movements.push(left); } // Push &#39;right&#39; movements to the array. for (let c = 0; c &lt; RIGHTinput; c++) { movements.push(right); } } // Set the initial index to 0 and execute each movement in sequence with a delay of 800 milliseconds. let index = 0; let intervalId = setInterval(() =&gt; { // If the end of the movements array has been reached, stop executing movements. if (index &gt;= movements.length) { clearInterval(intervalId); win(); // Call the win function. return; } movements[index](); // Execute the movement at the current index. index++; // Increment the index. }, 800); } . 3: List and Dictionaries . Scramble Game:Edwin . List = [1, 2, 3, 4, 5] Dict = { 1: &quot;Hi&quot;, 2: &quot;Hello&quot;, 3: &quot;Whats Up&quot; } # Why Do I call 0 for the first thing in a list, but 1 for Dict # print(List[0]) print(Dict[1]) . How I used a dictonary to make a game . Memory Game:James- Link . | . How I used List to make a game . Explain which parts of the code use lists The random.choice uses the word because it selects a random word from the list. | Explain what list manipulation is happening in that part The list is manipulated by generating a random number between the list index min/max, selecting a random item, and storing it in word. | . import random word_list = [&quot;python&quot;, &quot;computer&quot;, &quot;programming&quot;, &quot;algorithm&quot;, &quot;database&quot;, &quot;function&quot;, &quot;variable&quot;, &quot;loop&quot;, &quot;iteration&quot;, &quot;array&quot;, &quot;mutable&quot;, &quot;insertion&quot;, &quot;deletion&quot;, &quot;key&quot;, &quot;API&quot;] word = random.choice(word_list) scrambled_word = &quot;&quot;.join(random.sample(word, len(word))) print(f&quot;Unscramble the following Computer Science Word: {scrambled_word}&quot;) hints = 1 guesses = 1 guess = &quot;&quot; while guess != word and guesses &lt;= 4: guess = input(&quot;What&#39;s the unscrambled word? &quot;).lower() if guess != word: print(&quot;Sorry, that&#39;s not the word. Try again!&quot;) if guesses == 1: guesses += 1 elif guesses == 2: print(f&quot;Hint 1: The first letter of the word is &#39;{word[0]}&#39;&quot;) guesses += 1 elif guesses == 3: print(f&quot;Hint 2: The second letter of the word is &#39;{word[1]}&#39;&quot;) guesses += 1 else: print(f&quot;All 4 Guesses have been used, you didn&#39;t unscramble the word, the word was {word}&quot;) guesses += 1 else: print(&quot;Congratulations, you unscrambled the word!&quot;) . Hacks: Your Score/1 . General 0.3 . Copy this noteboook into your personal fastpages | Answer all questions | . Iteration 0.2 (can get up to 0.23) . Get to level 5 Take ScreenShots of your name inside the box an put them in your ticket | . | Create a code segment with iteration that does something cool | . 2D array 0.2 (can get up to 0.23) . Explain how the tic tac toe game works | Give 3 Examples of games that can be made from 2D arrays | . List and Dictionaries 0.2 (can get up to 0.23) . Explain the differences between Lists and Dictionaries | Make a code block that manipulates either a list or a dictionary | . General hacks . See above for all questions answered . Iteration . Levels: see ticket Code segment: . #include &lt;stdbool.h&gt; #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;string.h&gt; #include &quot;queue.h&quot; typedef struct bst_map_node { struct bst_map_node* left; struct bst_map_node* right; void* key; void* value; } bst_map_node_t; // 0: lhs == rhs // &gt; 0: lhs &gt; rhs // &lt; 0: lhs &lt; rhs typedef int (*comparator_t)(void* lhs, void* rhs); typedef struct { bst_map_node_t* root; comparator_t comparator; } bst_map_t; void bst_map_init(bst_map_t* bst_map, comparator_t comparator) { bst_map-&gt;root = NULL; bst_map-&gt;comparator = comparator; } bst_map_node_t** bst_map_insert2(bst_map_node_t** comparand_ptr, void* key, comparator_t comparator) { bst_map_node_t* comparand = *comparand_ptr; if (!comparand) return comparand_ptr; int result = comparator(key, comparand-&gt;key); // data &gt; comparand if (result &lt; 0) { return bst_map_insert2(&amp;comparand-&gt;left, key, comparator); } // data &lt; comparand else if (result &gt; 0) { return bst_map_insert2(&amp;comparand-&gt;right, key, comparator); } // data == comparand else return comparand_ptr; } void bst_map_insert(bst_map_t* bst_map, void* key, void* value) { bst_map_node_t* node = malloc(sizeof(bst_map_node_t)); node-&gt;left = NULL; node-&gt;right = NULL; node-&gt;key = key; node-&gt;value = value; if (!bst_map-&gt;root) { bst_map-&gt;root = node; } else { bst_map_node_t** slot = bst_map_insert2(&amp;bst_map-&gt;root, node-&gt;key, bst_map-&gt;comparator); *slot = node; } } // breadth-first traversal void bst_map_print(bst_map_t* bst_map) { queue_t nodes; queue_init(&amp;nodes); queue_push(&amp;nodes, bst_map-&gt;root); bst_map_node_t* node; while ((node = queue_pop(&amp;nodes)) != NULL) { printf(&quot;%s : %s n&quot;, (char*)node-&gt;key, (char*)node-&gt;value); if (node-&gt;left) queue_push(&amp;nodes, node-&gt;left); if (node-&gt;right) queue_push(&amp;nodes, node-&gt;right); } } // breadth-first search void* bst_map_get(bst_map_t* bst_map, void* key) { queue_t nodes; queue_init(&amp;nodes); queue_push(&amp;nodes, bst_map-&gt;root); bst_map_node_t* node; while ((node = queue_pop(&amp;nodes)) != NULL) { if (strlen(key) == strlen(node-&gt;key) &amp;&amp; strcmp(key, node-&gt;key) == 0) return node-&gt;value; if (node-&gt;left) queue_push(&amp;nodes, node-&gt;left); if (node-&gt;right) queue_push(&amp;nodes, node-&gt;right); } return NULL; } int compare_int(void* s1, void* s2) { int i1 = atoi(s1); int i2 = atoi(s2); return i1 - i2; } int main() { bst_map_t bst_map; bst_map_init(&amp;bst_map, (comparator_t)compare_int); bst_map_insert(&amp;bst_map, &quot;8&quot;, &quot;a&quot;); bst_map_insert(&amp;bst_map, &quot;3&quot;, &quot;b&quot;); bst_map_insert(&amp;bst_map, &quot;10&quot;, &quot;c&quot;); bst_map_insert(&amp;bst_map, &quot;1&quot;, &quot;d&quot;); bst_map_insert(&amp;bst_map, &quot;6&quot;, &quot;e&quot;); bst_map_insert(&amp;bst_map, &quot;14&quot;, &quot;f&quot;); bst_map_insert(&amp;bst_map, &quot;4&quot;, &quot;h&quot;); bst_map_insert(&amp;bst_map, &quot;7&quot;, &quot;i&quot;); bst_map_insert(&amp;bst_map, &quot;13&quot;, &quot;i&quot;); bst_map_print(&amp;bst_map); char* c = bst_map_get(&amp;bst_map, &quot;10&quot;); printf(&quot; nGET: n10 : %s n&quot;, c); } . The bst_map_get function includes a while loop that is important in the BFS traversal because it allows nodes to be processed one at a time. It constantly checks whether the current queue is not empty and pops the next node to print from it. . 2D array . The given Python code is an implementation of a two-player Tic Tac Toe game on the command line. The game board is represented using a 2D array of size 3x3. The print_board() function prints the current state of the board, while the check_win(player) and check_tie() functions determine if a player has won or if the game is tied, respectively. The play_game() function handles the main game loop, prompting players to enter their moves and updating the board state accordingly. 2D arrays are used extensively in the code to represent and manipulate the game board, with nested loops used to iterate over the rows and columns of the board to print its state and check for wins and ties. . Games that can be made using 2D arrays: chess, crosswords, mazes, battleship, connect-4, minesweeper, reversi, sokoban, snake, tetris . List and Dictionaries . Differences between list and dictionary: . Lists are collections of a single data type, while dictionaries are collections of key-value pairs, where the keys and values can be of two distinct types | List elements are accessed using a numeric index, while dictionary values are accessed using a key | Lists are ordered, while dictionaries are unordered (Binary Tree maps can be used to preserve order) | Lists are mutable, while dictionaries are mutable too | . Implementation of dictionary (hash map) from scratch using low-level memory semantics (full code): . #include &lt;math.h&gt; #include &lt;stddef.h&gt; #include &lt;stdlib.h&gt; #include &lt;string.h&gt; #include &quot;debug.h&quot; #include &quot;hash_map.h&quot; #include &quot;types.h&quot; void hash_map_init(hash_map_t* hash_map) { hash_map_bucket_t empty_bucket; empty_bucket.head = NULL; hash_map-&gt;buckets = (hash_map_bucket_t*)calloc(INIT_BUCKETS, sizeof(hash_map_bucket_t)); hash_map-&gt;num_buckets = INIT_BUCKETS; } u64 hash_map_len(hash_map_t* hash_map) { u64 len = 0; for (int i = 0; i &lt; hash_map-&gt;num_buckets; i++) { len += hash_map_bucket_len(&amp;hash_map-&gt;buckets[i]); } return len; } float hash_map_load_factor(hash_map_t* hash_map) { return (float)hash_map_len(hash_map) / hash_map-&gt;num_buckets; } void hash_map_resize(hash_map_t* hash_map) { u64 new_size = (u64)ceil((hash_map_len(hash_map) + 1) / MAGIC_LOAD_FACTOR); hash_map_bucket_t* new_buckets = (hash_map_bucket_t*)calloc(new_size, sizeof(hash_map_bucket_t)); for (int i = 0; i &lt; hash_map-&gt;num_buckets; i++) { hash_map_entry_t* entry_ptr = hash_map-&gt;buckets[i].head; while (entry_ptr) { u64 hash = djb2a(entry_ptr-&gt;key); hash_map_entry_t* entry = hash_map_bucket_insert(&amp;new_buckets[hash % new_size], entry_ptr); entry-&gt;next = NULL; entry_ptr = entry_ptr-&gt;next; } } free(hash_map-&gt;buckets); hash_map-&gt;num_buckets = new_size; hash_map-&gt;buckets = new_buckets; DEBUG_PRINT(&quot;hash_map_resize() to size %lu with load factor %f n&quot;, new_size, hash_map_load_factor(hash_map)); } hash_map_entry_t* hash_map_insert(hash_map_t* hash_map, char* key, char* value) { float load_factor = hash_map_load_factor(hash_map); if (fabs(load_factor) &gt; MAGIC_LOAD_FACTOR + EPSILON) { hash_map_resize(hash_map); } hash_map_entry_t* entry = (hash_map_entry_t*)malloc(sizeof(hash_map_entry_t)); entry-&gt;key = key; entry-&gt;value = value; entry-&gt;next = NULL; u64 hash = djb2a(entry-&gt;key); u64 bucket = hash % hash_map-&gt;num_buckets; DEBUG_PRINT(&quot;hash_map_insert(%s, %s) into bucket (%lu) n&quot;, entry-&gt;key, entry-&gt;value, bucket); hash_map_bucket_insert(&amp;hash_map-&gt;buckets[bucket], entry); return entry; } hash_map_entry_t* hash_map_get(hash_map_t* hash_map, char* key) { u64 hash = djb2a(key); hash_map_entry_t* entry_ptr = hash_map-&gt;buckets[hash % hash_map-&gt;num_buckets].head; while (entry_ptr) { if (strlen(key) == strlen(entry_ptr-&gt;key) &amp;&amp; strcmp(key, entry_ptr-&gt;key) == 0) { return entry_ptr; } entry_ptr = entry_ptr-&gt;next; } return NULL; } u64 hash_map_bucket_len(hash_map_bucket_t* bucket) { u64 len = 0; hash_map_entry_t* entry_ptr = bucket-&gt;head; while (entry_ptr) { len++; entry_ptr = entry_ptr-&gt;next; } return len; } u64 hash_map_bucket_collisions(hash_map_t* hash_map) { u64 collisions = 0; for (int i = 0; i &lt; hash_map-&gt;num_buckets; i++) { if (hash_map_bucket_len(&amp;hash_map-&gt;buckets[i]) &gt; 1) collisions++; } return collisions; } hash_map_entry_t* hash_map_bucket_insert(hash_map_bucket_t* hash_map_bucket, hash_map_entry_t* entry) { hash_map_entry_t** head = &amp;hash_map_bucket-&gt;head; hash_map_entry_t* entry_ptr = *head; if (!entry_ptr) { *head = entry; } else { while (entry_ptr-&gt;next) { entry_ptr = entry_ptr-&gt;next; } entry_ptr-&gt;next = entry; } return entry; } .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/2023/04/21/EOYPLAYGROUND.html",
            "relUrl": "/2023/04/21/EOYPLAYGROUND.html",
            "date": " • Apr 21, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Data Analysis Lesson",
            "content": "What you should Have to Start . Should have wget this file (tri3-lesson.ipynb) | wget this file: https://raw.githubusercontent.com/JoshuaW03628/Repository-1/master/nba_player_statistics.csv | Copy Path from nba_player_statistics.csv and replace prior path for it. | . Lesson Portion 1: ReIntroduction to Data Analysis, numpy, and Pandas, Why is it important? . Data Analysis. . Data Analysis is the process of examining data sets in order to find trends and draw conclusions about the given information. Data analysis is important because it helps businesses optimize their performances. | . What is numpy and Pandas . Pandas library involves a lot of data analysis in Python. NumPy Library is mostly used for working with numerical values and it makes it easy to apply with mathematical functions. | Imagine you have a lot of toys, but they are all mixed up in a big box. NumPy helps you to put all the same types of toys together, like all the cars in one pile and all the dolls in another. Pandas is like a helper that helps you to remember where each toy is located. So, if you want to find a specific toy, like a red car, you can ask Pandas to find it for you. | Just like how it&#39;s easier to find a toy when they are sorted and organized, it&#39;s easier for grown-ups to understand and analyze big sets of numbers when they use NumPy and Pandas. | . Lesson Portion 2 More into numpy . What we are covering; . Explanation of NumPy and its uses in data analysis | Importing NumPy library | Examining NumPy arrays | Creating NumPy arrays and performing intermediate array operations | Popcorn Hacks, Make your own percentile numpy array | . What is numpy&#39;s use in data analysis/ how to import numpy. . NumPy is a tool in Python that helps with doing math and data analysis. It&#39;s great for working with large amounts of data, like numbers in a spreadsheet. NumPy is really good at doing calculations quickly and accurately, like finding averages, doing algebra, and making graphs. It&#39;s used a lot by scientists and people who work with data because it makes their work easier and faster. . import numpy as np . List of numpy Functions, what they do, and examples. . Link; https://www.educba.com/numpy-functions/ | . Example of Using numpy in Our Project . This code calculates the total plate appearances for a baseball player using NumPy&#39;s sum() function, similar to the original example. It then uses NumPy to calculate the total number of bases (hits plus walks) for the player, and divides that by the total number of plate appearances to get the on-base percentage. The results are then printed to the console. . import numpy as np # Example data player_hits = np.array([3, 1, 2, 0, 1, 2, 1, 2]) # Player&#39;s hits in each game player_walks = np.array([1, 0, 0, 1, 2, 1, 1, 0]) # Player&#39;s walks in each game player_strikeouts = np.array([2, 1, 0, 2, 1, 1, 0, 1]) # Player&#39;s strikeouts in each game # array to store plate appearances (PA) for the player total_pa = np.sum(player_hits != 0) + np.sum(player_walks) + np.sum(player_strikeouts) # array to store on-base percentage (OBP) for the player total_bases = np.sum(player_hits) + np.sum(player_walks) obp = total_bases / total_pa # Print the total plate appearances and on-base percentage for the player print(f&quot;Total plate appearances: {total_pa}&quot;) print(f&quot;On-base percentage: {obp:.3f}&quot;) . Activity 1; PopCorn Hacks; Creating a numpy Array and Analyzing the Data using Array Operations . import numpy as np grades = np.array([89, 70, 94, 93, 79, 93, 86, 94, 100, 85, 84, 83, 74]) percentiles = np.percentile(grades, [25, 50, 75]) # Print the results print(&quot;The 25th percentile grade is&quot;, str(percentiles[0]) + &quot;%&quot;) print(&quot;The 50th percentile grade is&quot;, str(percentiles[1]) + &quot;%&quot;) print(&quot;The 75th percentile grade is&quot;, str(percentiles[2]) + &quot;%&quot;) # Determine the number of players who are in the top 10% tallest top_10_percent = np.percentile(grades, 90) highest_grades = grades[grades &gt;= top_10_percent] print(&quot;There are&quot;, len(highest_grades), &quot;students with the top 10% of grades; they have &quot; + &quot;, &quot;.join( [str(grade) + &quot;%&quot; for grade in highest_grades] )) . The 25th percentile grade is 83.0% The 50th percentile grade is 86.0% The 75th percentile grade is 93.0% There are 3 students with the top 10% of grades; they have 94%, 94%, 100% . Lesson Portion 3 More into Pandas . What we are Covering . Explanation of Pandas and its uses in data analysis | Importing Pandas library | Loading data into Pandas DataFrames from CSV files | Manipulating and exploring data in Pandas DataFrames | Example of using Pandas for data analysis tasks such as filtering and sorting | . What are pandas and what is its purpose? . Pandas is a software library that is used in Python | Pandas are used for data analysis and data manipulation | Pandas offer data structures and operations for manipulating numerical tables and time series. | Pandas is free | . Things you can do using pandas . Data Cleansing; Identifying and correcting errors, inconsistencies, and inaccuracies in datasets. | Data fill; Filling in missing values in datasets. | Statistical Analysis; Analyzing datasets using statistical techniques to draw conclusions and make predictions. | Data Visualization; Representing datasets visually using graphs, charts, and other visual aids. | Data inspection; Examining datasets to identify potential issues or patterns, such as missing data, outliers, or trends. | . Pandas and Data analysis . The 2 most important data structures in Pandas are: . Series ; A Series is a one-dimensional labeled array that can hold data of any type (integer, float, string, etc.). It is similar to a column in a spreadsheet or a SQL table. Each element in a Series has a label, known as an index. A Series can be created from a list, a NumPy array, a dictionary, or another Pandas Series. | DataFrame ;A DataFrame is a two-dimensional labeled data structure that can hold data of different types (integer, float, string, etc.). It is similar to a spreadsheet or a SQL table. Each column in a DataFrame is a Series, and each row is indexed by a label, known as an index. A DataFrame can be created from a dictionary of Series or NumPy arrays, a list of dictionaries, or other Pandas DataFrame. | . Dataframes . import pandas as pd . pd.__version__ . Importing CSV Data . imports the Pandas library and assigns it an alias &#39;pd&#39;. | Loads a CSV file named &#39;nba_player_statistics.csv&#39; into a Pandas DataFrame called &#39;df&#39;. | Specifies a player&#39;s name &#39;Jimmy Butler&#39; to filter the DataFrame for that player&#39;s stats. It creates a new DataFrame called &#39;player_stats&#39; which only contains rows where the &#39;NAME&#39; column matches &#39;Jimmy Butler&#39;. | Displays the player&#39;s stats for points per game (PPG), rebounds per game (RPG), and assists per game (APG) using the print() function and string formatting. | The code uses the double square brackets [[PPG&#39;, &#39;RPG&#39;, &#39;APG&#39;]] to select only the columns corresponding to the player&#39;s points per game, rebounds per game, and assists per game from the player_stats DataFrame. | In summary, the code loads NBA player statistics data from a CSV file, filters it for a specific player, and displays the stats for that player&#39;s PPG, RPG, and APG using a Pandas DataFrame. | . import pandas as pd # Load the CSV file into a Pandas DataFrame df = pd.read_csv(&#39;nba_player_statistics.csv&#39;) # Filter the DataFrame to only include stats for a specific player (in this case, Jimmy Butler) player_name = &#39;Jimmy Butler&#39; player_stats = df[df[&#39;NAME&#39;] == player_name] # Display the stats for the player print(f&quot; nStats for {player_name}:&quot;) print(player_stats[[&#39;PPG&#39;, &#39;RPG&#39;, &#39;APG&#39;]]) . In this code segment below we use Pandas to read a CSV file containing NBA player statistics and store it in a DataFrame. . The reason Pandas is useful in this scenario is because it provides various functionalities to filter, sort, and manipulate the NBA data efficiently. In this code, the DataFrame is filtered to only include the stats for the player you guys choose. . Imports the Pandas library and assigns it an alias &#39;pd&#39;. | Loads a CSV file named &#39;nba_player_statistics.csv&#39; into a Pandas DataFrame called &#39;df&#39;. | Asks the user to input a player name using the input() function and assigns it to the variable player_name. | Filters the DataFrame for the specified player name using the df[df[&#39;NAME&#39;] == player_name] syntax, and assigns the resulting DataFrame to the variable player_stats. | Checks if the player_stats DataFrame is empty using the empty attribute. If it is empty, prints &quot;No stats found for that player.&quot; Otherwise, it proceeds to step 6. | Displays the player&#39;s stats for points per game (PPG), rebounds per game (RPG), assists per game (APG), and total points + rebounds + assists (P+R+A) using the print() function and string formatting. | In summary, this code loads NBA player statistics data from a CSV file, asks the user to input a player name, filters the DataFrame for that player&#39;s stats, and displays the player&#39;s stats for PPG, RPG, APG, and P+R+A. If the player is not found in the DataFrame, it prints a message indicating that no stats were found. | . import pandas as pd df = pd.read_csv(&#39;nba_player_statistics.csv&#39;) # Load CSV file into a Pandas DataFrame player_name = input(&quot;Enter player name: &quot;) # Get player name input from user player_stats = df[df[&#39;NAME&#39;] == player_name] # Filter the DataFrame to only include stats for the specified player if player_stats.empty: print(&quot;No stats found for that player.&quot;) else: # Check if the player exists in the DataFrame print(f&quot; nStats for {player_name}:&quot;) print(player_stats[[&#39;PPG&#39;, &#39;RPG&#39;, &#39;APG&#39;, &#39;P+R+A&#39;]]) # Display the stats for the player inputted. . Lesson Portion 4 . What we will be covering . Example of analyzing data using both NumPy and Pandas libraries | Importing data into NumPy and Pandas Performing basic data analysis tasks such as mean, median, and standard deviation Visualization of data using Matplotlib library | . Example of analyzing data using both NumPy and Pandas libraries . import numpy as np import pandas as pd # Load CSV file into a Pandas DataFrame df = pd.read_csv(&#39;nba_player_statistics.csv&#39;) # Filter the DataFrame to only include stats for the specified player player_name = input(&quot;Enter player name: &quot;) player_stats = df[df[&#39;NAME&#39;] == player_name] if player_stats.empty: print(&quot;No stats found for that player.&quot;) else: # Convert the player stats to a NumPy array player_stats_np = np.array(player_stats[[&#39;PPG&#39;, &#39;RPG&#39;, &#39;APG&#39;, &#39;P+R+A&#39;]]) # Calculate the average of each statistic for the player player_stats_avg = np.mean(player_stats_np, axis=0) # Print out the average statistics for the player print(f&quot; nAverage stats for {player_name}:&quot;) print(f&quot;PPG: {player_stats_avg[0]:.2f}&quot;) print(f&quot;RPG: {player_stats_avg[1]:.2f}&quot;) print(f&quot;APG: {player_stats_avg[2]:.2f}&quot;) print(f&quot;P+R+A: {player_stats_avg[3]:.2f}&quot;) . Average stats for LeBron James: PPG: 21.00 RPG: 11.00 APG: 5.00 P+R+A: 37.00 . NumPy impacts the given code because it performs operations on arrays efficiently. Specifically, it converts a Pandas DataFrame object to a NumPy array object, and then calculates the average statistics for a the player you guys inputted. Without NumPy, it would be more difficult and less efficient to perform these calculations on large data sets. It does the math for us. . Importing data into NumPy and Pandas Performing basic data analysis tasks such as mean, median, and standard deviation Visualization of data using Matplotlib library . Matplotlib is used essentially to create visuals of data. charts,diagrams,etc. . import numpy as np import pandas as pd import matplotlib.pyplot as plt # Load the CSV file into a Pandas DataFrame df = pd.read_csv(&#39;nba_player_statistics.csv&#39;) # Print the first 5 rows of the DataFrame print(df.head()) # Calculate the mean, median, and standard deviation of the &#39;Points&#39; column mean_minutes = df[&#39;MPG&#39;].mean() median_minutes = df[&#39;MPG&#39;].median() stddev_minutes = df[&#39;MPG&#39;].std() # Print the results print(&#39;Mean Minutes: &#39;, mean_minutes) print(&#39;Median Minutes: &#39;, median_minutes) print(&#39;Standard Deviation Minutes: &#39;, stddev_minutes) # Create a histogram of the &#39;Points&#39; column using Matplotlib plt.hist(df[&#39;MPG&#39;], bins=20) plt.title(&#39;MPG Histogram&#39;) plt.xlabel(&#39;MPG&#39;) plt.ylabel(&#39;Frequency&#39;) plt.show() . In this example code, we first import the necessary libraries, including NumPy, Pandas, and Matplotlib. We then load the CSV file into a Pandas DataFrame using the pd.read_csv() function. We print the first 5 rows of the DataFrame using the df.head() function. Next, we calculate the mean, median, and standard deviation of the &#39;MPG&#39; column using the appropriate Pandas methods, and print the results. And, we create a histogram of the &#39;MPG&#39; column using Matplotlib by calling the plt.hist() function and setting appropriate axis labels and a title. We then call the plt.show() method to display the plot. Even though NumPy is not directly used in this code, it is an important underlying component of the pandas and Matplotlib libraries, which are used to load, manipulate and visualize data. It allows them to work more efficiently . Lesson Portion 5; Summary . Summary/Goals of Lesson: . One of our goals was to make you understand data analysis and how it can be important in optimizing business performance. We also wanted to make sure you understood the use of Pandas and NumPy libraries in data analysis, with a focus on NumPy. As someone who works with data, we find Pandas incredibly useful for manipulating, analyzing, and visualizing data in Python. The way we use pandas is to calculate individual player and team statistics. We are a group that works with numerical data, so NumPy is one of our favorite tools for working with arrays and applying mathematical functions to them. It is very fast at computing and manipulating arrays making it a very valuable tool for tracking statistics which is important to our group. For example, if you have an array of the points scored by each player in a game, you can use NumPy to calculate the total points scored, average points per player, or the highest and lowest scoring players. . Lesson Portion 6 Hacks . Printing a CSV File (0.5) . Use this link https://github.com/ali-ce/datasets to select csv file of a topic you are interested in, or you may find one online. | Once you select your topic make sure it is a csv file and then you want to press on the button that says raw. | After that copy that information and create a file with a name and .csv at the end and paste your information. | Below is a start that you can use for your hacks. | Your goal is to print 2 specific parts from data (example could be like population and country). | . Popcorn Hacks (0.2) . Lesson Portion 1. #### Answering Questions (0.2) | Found Below. | . Submit By Thursday 8:35 A.M. . How to Submit: Slack a Blog Post that includes all of your hacks to &quot;Joshua Williams&quot; on Slack. | . import pandas as pd # read the CSV file df = pd.read_csv(&quot;blank.csv&quot;) # display the data in a table print(df) . Question Hacks; . What is NumPy and how is it used in data analysis? . What is Pandas and how is it used in data analysis? . How is numpy different than Pandas for data analysis? . What is a DataFrame? . What are some common operations you can perform with numpy? . How Can You Incorporate Either of these Data Analysis Tools (numpy, Pandas) into your project? .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/notebooks/2023/04/19/tri3_lesson.html",
            "relUrl": "/notebooks/2023/04/19/tri3_lesson.html",
            "date": " • Apr 19, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "2018 MCQ",
            "content": ". Score: 63/66 . Question 43 . Based on the values in the table, which of the following best characterizes the algorithm for very large values of n? . A. The algorithm runs in reasonable time. B. The algorithm runs, but not in reasonable time. C. The algorithm attempts to solve an undecidable problem. D. The algorithm attempts to find an approximate solution whenever it fails to find an exact solution. . I put B, but the correct answer was A. Realistically, polynomial time is not reasonable for large inputs. Apparently, CollegeBoard thinks it is. . Question 41 . Which of the following could be used in the procedure to calculate a student’s total points earned in the course and store the result in the variable adjustedTotal? . I put C, but the right answer was B: adjustedMax &lt;- Max(midtermScore, finalScore) + finalScore. I got this wrong because I picked the one where the midterm score was added. However, that is incorrect because the midterm score was the one being replaced. . Question 30 . Which of the following best approximates the amount of time it takes the program to execute? . A. 1 hour B. 2 hours C. 4 hours D. 5 hours . I put C, but the right answer was D. I missed the call of Analysis on line 1 and only counted the iterations of the loop. .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/ap/2023/04/18/mcq.html",
            "relUrl": "/markdown/csp/ap/2023/04/18/mcq.html",
            "date": " • Apr 18, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "NGINX Lesson",
            "content": "Lesson Plan: Introduction to NGINX . Objective . This lesson will teach students about NGINX, how to configure it for basic HTTP servers, proxy passing, and SSL. . Prerequisites . Basic understanding of HTTP | Familiarity with the command line | . Materials . Computer with internet access | NGINX installed | . Lesson Outline . Introduction to NGINX | Basic NGINX configuration | Configuring a simple HTTP server | Proxy passing | Configuring SSL | . 1. Introduction to NGINX . NGINX is a powerful web server, reverse proxy server, and load balancer. In this lesson, we will focus on using NGINX as a web server and reverse proxy server. . Key Terms . Web server: A software that serves web content (HTML, CSS, JavaScript, etc.) to clients, such as web browsers. | Reverse proxy server: A server that acts as an intermediary between clients and other servers, forwarding client requests to the appropriate servers and returning the servers’ responses to the clients. | . . 2. Basic NGINX Configuration . NGINX configuration files use a simple, declarative syntax. Here’s a basic structure of an NGINX configuration file: . events { worker_connections 1024; } http { server { # Server configuration goes here } } . 3. Configuring a Simple HTTP Server . Let’s configure a basic HTTP server that serves static files from a directory. . http { server { listen 80; server_name example.com; root /var/www/html; location / { try_files $uri $uri/ =404; } } } . Code Explanation . listen 80;: This directive tells NGINX to listen for incoming connections on port 80 (the default HTTP port). | server_name example.com;: This directive specifies the domain name for the server. | root /var/www/html;: This directive sets the root directory for serving static files. | location / { ... }: This block defines a location context for the root URL path. | try_files $uri $uri/ =404;: This directive tells NGINX to try serving a requested file, then a directory with the same name, or return a 404 error if neither is found. | . 4. Proxy Passing . Now, let’s configure NGINX as a reverse proxy server to forward incoming requests to a backend server. . http { server { listen 80; server_name proxy.example.com; location / { proxy_pass http://backend.example.com; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; } } } . Code Explanation . proxy_pass http://backend.example.com;: This directive forwards incoming requests to the specified backend server. | proxy_set_header Host $host;: This directive sets the Host header to the domain name of the proxy server. | proxy_set_header X-Real-IP $remote_addr;: This directive sets the X-Real-IP header to the client’s IP address. | .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/ap/2023/04/02/lesson-plan.html",
            "relUrl": "/markdown/csp/ap/2023/04/02/lesson-plan.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Unit 4.3A",
            "content": "Analyzing Parallel Computing . Once again we will use image lab, this time to review Parallel Computing. . Change baseWidth in this line in code to increase computation requirements:def process_image(image, baseWidth=512): For instance 320, 512, 1024, 2048, 4096.- Compare Sequential and Parallel computing code and time to achieve outputs | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as PIL Image is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Scale to baseWidth def scale_image(img, baseWidth): scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Convert pixels to Grey Scale def grey_pixel(pixel): average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: return( (average, average, average, pixel[3]) ) # PNG format else: return( (average, average, average) ) # Convert pixels to Red Scale def red_pixel(pixel): if len(pixel) &gt; 3: return( (pixel[0], 0, 0, pixel[3]) ) # PNG format else: return( (pixel[0], 0, 0) ) # Convert pixels to Red Scale def green_pixel(pixel): if len(pixel) &gt; 3: return( (0, pixel[1], 0, pixel[3]) ) # PNG format else: return( (0, pixel[1], 0) ) # Convert pixels to Red Scale def blue_pixel(pixel): if len(pixel) &gt; 3: return( (0, 0, pixel[2], pixel[3]) ) # PNG format else: return( (0, 0, pixel[2]) ) # Set Properties of Image, Scale, and convert to Base64 def image_management(image, baseWidth): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img, baseWidth) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;numpy&#39;] = np.array(img.getdata()) # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Grey HTML # each pixel in numpy array is turned to grey # then resulting list, using List Comprehension, is put back into img img.putdata([grey_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Red HTML img.putdata([red_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_red&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Green HTML img.putdata([green_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_green&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Blue HTML img.putdata([blue_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_blue&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) def process_image(image, baseWidth=320): image_management(image, baseWidth) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- images --&quot;) display(HTML(image[&#39;html&#39;])) display(HTML(image[&#39;html_grey&#39;])) display(HTML(image[&#39;html_red&#39;])) display(HTML(image[&#39;html_green&#39;])) display(HTML(image[&#39;html_blue&#39;])) . Sequential Processing . The for loop iterates over the list of images and processes them one at a time, in order. . if __name__ == &quot;__main__&quot;: # setup default images images = image_data() # Sequential Processing for image in images: process_image(image) print() . Parallel Computing . In parallel or concurrent mode, the ThreadPoolExecutor is used to submit each image to a separate worker thread, allowing multiple images to be processed simultaneously. Multithreading allows multiple concurrent tasks of a process at the same time. The executor.map() method is used to apply the process_image function to each image in the images list. . The order in which the images are processed is not guaranteed, as threads are performed simultaneously. | . import concurrent.futures # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # setup default images images = image_data() # Parallel Processsing # executor allocates threads, it considers core execution capability of machine with concurrent.futures.ThreadPoolExecutor() as executor: executor.map(process_image, images) # order is not predictable print() . Observing Parallel Computing and Threads . You can observe Processes, CPU Percentage, and Threads with Tools on your machine. Common tools to monitor performance are Activity Monitor on MacOS or Task Manager on Windows. . This example is using top launched in VSCode Terminal. (mac) | Try top -H for linux. PID is Process ID. | COMMAND is task running on machine. Python is activated when running this Jupyter notebook. | #TH is number of threads. This increases from 15/1 to 18/1 on my machine when running python parallel computing example. | . | . Hacks . AP Classroom. Provide answers and thoughts on theoritical question form college board Video in section 4.3. They start at about the 9 minute mark. . Example 1 The minimum amount of time to execute all 3 processes is equal to the longest time it takes to execute a single process given that they all spawn at the same time and run in parallel. . | Example 2 . | . Parallel processor:max(25, 45) = 45 secSequential processor: 25 + 45 = 70 sec Difference: 70 - 45 = 25 sec . See above; parallel processing time is equal to maximum individual time. Sequential time assumes that all tasks run one after another without delay. . Data Structures. Build a List Comprehension example . list = [calc(item) for item in items] | . def pig_latin(word): if word.isalpha(): return word[1:] + word[0] + &quot;ay&quot; return word sentence = &quot;Hello &quot; + input(&quot;Enter your name&quot;) + &quot;! Nice to meet you.&quot; words = sentence.split(&quot; &quot;) # calls `pig_latin` on every word in the sentence latin = [pig_latin(word) for word in words] latin_sentence = &quot; &quot;.join(latin) print(latin_sentence) . elloHay Safin! iceNay otay eetmay you. .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/2023/03/29/unit4-3a.html",
            "relUrl": "/2023/03/29/unit4-3a.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Hashmaps & Sets",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a dictionary. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is O(1). | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # Only unique numbers are printed # # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # They only contain unique values # . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # # # Printing the dictionary print(lover_album) . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . lover_album[&quot;producer&quot;] = [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] # What can you change to make sure there are no duplicate producers? lover_album[&quot;producer&quot;] = set(lover_album[&quot;producer&quot;]) # # Printing the dictionary print(lover_album) . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? lover_album[&quot;genre&quot;].push(&quot;stuff&quot;) # # Printing the dictionary print(lover_album) . for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format # for k,v in lover_album[&quot;tracks&quot;].items(): print(&quot;Track &quot; + str(k) + &quot;: &quot; + v) # . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # # Abstract search parameter: def search2(search): if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search2(&quot;producer&quot;) . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | . +-++ | Dictionaries | Lists | +-++ | Unordered | Ordered | | Accessed by key | Accessed by index | | Keys must be unique | Can have duplicates | | Value can be any | Value can be any | | object type | object type | | Can&#39;t be sliced | Can be sliced | | Can&#39;t be sorted | Can be sorted | | Use curly braces {} | Use square brackets [] | ++-+ . Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary | . channel_orange_album = { &quot;title&quot;: &quot;channel ORANGE&quot;, &quot;artist&quot;: &quot;Frank Ocean&quot;, &quot;year&quot;: 2012, &quot;genre&quot;: [&quot;Alternative R&amp;B&quot;, &quot;Neo-Soul&quot;], &quot;tracks&quot;: { 1: &quot;Start&quot;, 2: &quot;Thinkin Bout You&quot;, 3: &quot;Fertilizer&quot;, 4: &quot;Sierra Leone&quot;, 5: &quot;Sweet Life&quot;, 6: &quot;Not Just Money&quot;, 7: &quot;Super Rich Kids (feat. Earl Sweatshirt)&quot;, 8: &quot;Pilot Jones&quot;, 9: &quot;Crack Rock&quot;, 10: &quot;Pyramids&quot;, 11: &quot;Lost&quot;, 12: &quot;White (feat. John Mayer)&quot;, 13: &quot;Monks&quot;, 14: &quot;Bad Religion&quot;, 15: &quot;Pink Matter (feat. André 3000)&quot;, 16: &quot;Forrest Gump&quot;, 17: &quot;End&quot; } } . For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed | . It is my pleasure to delve into the musical masterpiece that is &quot;Shake It Off&quot; by Taylor Swift. This song stands out among her many hits as a true representation of her unparalleled songwriting abilities and artistic vision. . Firstly, the infectious melody of &quot;Shake It Off&quot; is one that simply cannot be ignored. From the opening notes, listeners are drawn into the upbeat rhythm that sets the tone for the entire song. Swift&#39;s use of repetition throughout the chorus creates a singalong-worthy hook that is both memorable and catchy. Furthermore, the instrumental arrangement is perfectly balanced, blending horns, drums, and guitar to create a dynamic sound that complements Swift&#39;s vocals beautifully. . Beyond its musical merits, &quot;Shake It Off&quot; is a lyrical masterpiece. Swift&#39;s signature storytelling is on full display, as she takes listeners on a journey of self-discovery and resilience. The song&#39;s central message, to let go of negativity and embrace positivity, is one that resonates with people of all ages and backgrounds. Swift&#39;s ability to articulate this message through her lyrics is a testament to her songwriting prowess and demonstrates her ability to connect with her audience on a personal level. . Additionally, &quot;Shake It Off&quot; marks a significant departure from Swift&#39;s earlier works, showcasing her growth and evolution as an artist. The song&#39;s pop-infused sound was a departure from her country roots and signaled a shift towards a more mainstream sound. This willingness to take risks and explore new musical territories is a hallmark of Swift&#39;s career and has helped to solidify her status as a musical icon. . It is also worth noting that &quot;Shake It Off&quot; has had a lasting impact on popular culture. The song&#39;s music video, which features Swift showcasing various dance moves and outfits, has become iconic in its own right. The video has been viewed over 3 billion times on YouTube and has inspired countless parodies and tributes. This cultural impact further cements the song&#39;s status as one of Swift&#39;s most enduring and beloved works. . In conclusion, &quot;Shake It Off&quot; is a true masterpiece of modern pop music. Its infectious melody, powerful lyrics, and lasting impact on popular culture have cemented its status as one of Taylor Swift&#39;s greatest songs. I can confidently say that &quot;Shake It Off&quot; is not only an artistic triumph but also a cultural touchstone that will continue to inspire and resonate with people for years to come. .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/2023/03/29/DS-hashmaps.html",
            "relUrl": "/2023/03/29/DS-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "CPT Plan",
            "content": "College Board CPT Plan . Outline . My feature planned for the Create Performance Task is a todo list where a user can manipulate a series of todos via addition, deletion, and completion. I plan to satisfy all the CollegeBoard criteria as such: . Program Purpose and Function: I will describe the input, program functionality, and output of the addTodo procedure within my code. The input is the text of the new todo to be added. The functionality is that it creates a new JavaScript object containing the todo text and a completion status. It then creates a new list from the todo list but adds the new todo to it. The output is the newly created todo list. The output of the addTodo function will be passed to the setTodos function, which displays the todos on screen. | Data Abstraction: I will describe how my data is stored in a list and how it contributes to the program function. I will describe how the todos are added to a central list which are manipulated by the addTodo, deleteTodo, and completeTodo functions. The list will be used for the rendering function that uses the todoList as input and renders the resulting todos on the HTML page. | Managing Complexity: the todo list manages complexity within the program by storing all the todos in an ordered fashion. It allows for the manipulation of a set of todos using addition, deletion, and completion functions. I will discuss how it is a replacement for storing todos individual variables and is much more easy to program this way. | Procedural Abstraction: I will discuss how my student-developed completeTodo procedure has an input of a todo ID, searches for a todo within a list by its ID, and modifies its completion status based on the procedure’s completed parameter. It contributes to the program function because it is essential for toggling the todo’s status when a user has either completed or marked a todo incomplete. | Algorithm Implementation: I will discuss the render algorithm within my todo program. The render algorithm leverages sequencing as it loops through the entire list of todos. It leverages selection by using an if statement to determine whether each todo it’s looping through is completed or not. Based on the result, it toggles the CSS completed class to alter the appearance of the todo. Iteration is used within the for loop to increment the index of the selected todo in the todoList. | Testing: I will write a testing procedure that tests the state of the todoList after running the addTodo, removeTodo, and completeTodo respectively. It will ensure that each procedure works properly by asserting whether the todoList contains the expected values after each method. It will print the result of each test in order to properly identify the result of each call. | . Video Plan . I plan to cover all of the above points comprehensively in my video. I will address all of the CollegeBoard criteria as specified in the rubric and detailed above. .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/ap/2023/03/27/cpt-plan.html",
            "relUrl": "/markdown/csp/ap/2023/03/27/cpt-plan.html",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Big Idea 2",
            "content": "Score: 23/25 . Q20 . A large spreadsheet contains the following information about local restaurants. A sample portion of the spreadsheet is shown below. In column B, the price range represents the typical cost of a meal, where “lo” indicates under $10, “med” indicates $11 to $30, and “hi” indicates over $30. In column D, the average customer rating is set to -1.0 for restaurants that have no customer ratings. A student wants to count the number of restaurants in the spreadsheet whose price range is $30 or less and whose average customer rating is at least 4.0. For a given row in the spreadsheet, suppose prcRange contains the price range as a string and avgRating contains the average customer rating as a decimal number. . Which of the following expressions will evaluate to true if the restaurant should be counted and evaluates to false otherwise? . A. (avgRating ≥ 4.0) AND ((prcRange = “lo”) AND (prcRange = “med”)) B. (avgRating ≥ 4.0) AND ((prcRange = “lo”) OR (prcRange = “med”)) C.(avgRating ≥ 4.0) OR ((prcRange = “lo”) AND (prcRange = “med”)) D. (avgRating ≥ 4.0) OR ((prcRange = “lo”) OR (prcRange = “med”)) . Explanation . The question asks students to count the number of restaurants in a spreadsheet that meet two specific criteria: their price range had to be $30 or less and their average customer rating had to be at least 4.0. We were provided with a sample portion of the spreadsheet that contained information about local restaurants, where the price range was represented by a string and the average customer rating was set to -1.0 for restaurants that had no customer ratings. . The task was to write a logical expression that evaluates to true if a restaurant meets the given criteria and evaluates to false otherwise. The expression had to use logical operators and conditionals to check if the price range is $30 or less and if the average customer rating is at least 4.0. . To write the expression, I first needed to understand the given criteria and the data provided in the spreadsheet. I noted that the price range was represented by the strings “lo,” “med,” and “hi,” where “lo” indicated a cost of under $10, “med” indicated a cost of $11 to $30, and “hi” indicated a cost over $30. Additionally, the average customer rating was set to -1.0 for restaurants that had no customer ratings. . Given this information, I started to analyze the options provided in the quiz. Option A stated that the expression would evaluate to true if the average rating was greater than or equal to 4.0 and if the price range was both “lo” and “med.” However, this was not a correct expression since a restaurant cannot have both “lo” and “med” as a price range. Thus, Option A would always evaluate to false, and it would not count any restaurants that met the criteria. . Option B, on the other hand, correctly used the logical OR operator to include restaurants that had a price range of either “lo” or “med” and a customer rating of at least 4.0. This expression would evaluate to true if either of the conditions was met, ensuring that restaurants meeting the criteria would be counted. . Q21 . A large spreadsheet contains information about the photographs in a museum’s collection. A sample portion of the spreadsheet is shown below. . In column A, each unknown photographer is set to “(unknown)”. In column C, each unknown year is set to -1. . A student is developing an algorithm to determine the name of the photographer who took the oldest photograph in the collection. Photographs whose photographer or year are unknown are to be ignored. . Once the algorithm is complete, the desired entry will appear in the first row of the spreadsheet. If there are multiple entries that meet the desired criteria, then any of them can appear in the first row. . Which of the following sequences of steps can be used to identify the desired entry? . Select two answers. . A. Filter by photographer, then filter by year, then sort by subject B. Filter by photographer, then filter by year, then sort by year C. Sort by subject, then sort by year, then filter by photographer D. Sort by year, then filter by year, then filter by photographer . Explanation . In this problem, a student is developing an algorithm to determine the name of the photographer who took the oldest photograph in the collection. Photographs whose photographer or year are unknown are to be ignored. . The student has the following actions available: filter by photographer, filter by year, sort by subject, and sort by year. Applying either of the filters will not change the relative order of the rows remaining in the spreadsheet. . The desired entry will appear in the first row of the spreadsheet. If there are multiple entries that meet the desired criteria, then any of them can appear in the first row. . Option A suggests filtering by photographer, then filtering by year, and then sorting by subject. Filtering by photographer will remove the entries whose photographer is unknown. However, this does not guarantee that the oldest photograph will be selected, as there could be multiple photographs from different photographers. Additionally, sorting by subject alphabetically will not provide any useful information in determining the oldest photograph in the collection. . Option C suggests sorting by subject, then sorting by year, and then filtering by photographer. However, sorting by subject alphabetically does not provide any useful information in determining the oldest photograph in the collection. Furthermore, filtering by photographer after sorting by year does not ensure that the desired entry will appear in the first row of the spreadsheet. . Option B suggests filtering by photographer, then filtering by year, and then sorting by year. Filtering by photographer will remove the entries whose photographer is unknown. Filtering by year will remove the entries whose year is unknown. Sorting by year will arrange the photographs in the order of the oldest to the most recent. Thus, the first row of the spreadsheet will contain the oldest photograph in the collection. . Option D suggests sorting by year, then filtering by year, and then filtering by photographer. Sorting by year will arrange the photographs in the order of the oldest to the most recent. Filtering by year will remove the entries whose year is unknown. Filtering by photographer after sorting by year will ensure that the desired entry will appear in the first row of the spreadsheet. . Therefore, options B and D can be used to identify the desired entry. .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/2023/03/27/bigidea-2.html",
            "relUrl": "/markdown/csp/2023/03/27/bigidea-2.html",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Time/Space Complexity",
            "content": "Space and Time Complexity . Space complexity refers to the amount of memory used by an algorithm to complete its execution, as a function of the size of the input. The space complexity of an algorithm can be affected by various factors such as the size of the input data, the data structures used in the algorithm, the number and size of temporary variables, and the recursion depth. Time complexity refers to the amount of time required by an algorithm to run as the input size grows. It is usually measured in terms of the &quot;Big O&quot; notation, which describes the upper bound of an algorithm&#39;s time complexity. . Why do you think a programmer should care about space and time complexity? Considerations should be made for space and time complexity to ensure that algorithms being used are both memory and time-efficient. . Take a look at our lassen volcano example from the data compression tech talk. The first code block is the original image. In the second code block, change the baseWidth to rescale the image. . from IPython.display import Image, display from pathlib import Path # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) if __name__ == &quot;__main__&quot;: lassen_volcano = image_data(images=[{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) image_display(lassen_volcano) . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def scale_image(img): #baseWidth = 625 #baseWidth = 1250 #baseWidth = 2500 baseWidth = 5000 # see the effect of doubling or halfing the baseWidth #baseWidth = 10000 #baseWidth = 20000 #baseWidth = 40000 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size image[&#39;width&#39;], image[&#39;height&#39;] = img.size image[&#39;pixels&#39;] = image[&#39;width&#39;] * image[&#39;height&#39;] # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;scaled_width&#39;], image[&#39;scaled_height&#39;] = img.size image[&#39;scaled_pixels&#39;] = image[&#39;scaled_width&#39;] * image[&#39;scaled_height&#39;] # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data(images = [{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;pixels&#39;]:,}&quot;) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;scaled_pixels&#39;]:,}&quot;) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) . Do you think this is a time complexity or space complexity or both problem? . This is a time complexity issue. According to PIL documentation, for an image of size n * m, the time complexity of Image.resize() is O(n * m) | . Big O Notation . Constant O(1) | Linear O(n) | Quadratic O(n^2) | Logarithmic O(logn) | Exponential (O(2^n)) | . numbers = list(range(1000)) print(numbers) . Constant O(1) . Time . An example of a constant time algorithm is accessing a specific element in an array. It does not matter how large the array is, accessing an element in the array takes the same amount of time. Therefore, the time complexity of this operation is constant, denoted by O(1). . print(numbers[263]) ncaa_bb_ranks = {1:&quot;Alabama&quot;,2:&quot;Houston&quot;, 3:&quot;Purdue&quot;, 4:&quot;Kansas&quot;} #look up a value in a dictionary given a key print(ncaa_bb_ranks[1]) . Space . This function takes two number inputs and returns their sum. The function does not create any additional data structures or variables that are dependent on the input size, so its space complexity is constant, or O(1). Regardless of how large the input numbers are, the function will always require the same amount of memory to execute. . def sum(a, b): return a + b print(sum(90,88)) print(sum(.9,.88)) . Linear O(n) . Time . An example of a linear time algorithm is traversing a list or an array. When the size of the list or array increases, the time taken to traverse it also increases linearly with the size. Hence, the time complexity of this operation is O(n), where n is the size of the list or array being traversed. . for i in numbers: print(i) . Space . This function takes a list of elements arr as input and returns a new list with the elements in reverse order. The function creates a new list reversed_arr of the same size as arr to store the reversed elements. The size of reversed_arr depends on the size of the input arr, so the space complexity of this function is O(n). As the input size increases, the amount of memory required to execute the function also increases linearly. . def reverse_list(arr): n = len(arr) reversed_arr = [None] * n #create a list of None based on the length or arr for i in range(n): reversed_arr[n-i-1] = arr[i] #stores the value at the index of arr to the value at the index of reversed_arr starting at the beginning for arr and end for reversed_arr return reversed_arr print(numbers) print(reverse_list(numbers)) . Quadratic O(n^2) . Time . An example of a quadratic time algorithm is nested loops. When there are two nested loops that both iterate over the same collection, the time taken to complete the algorithm grows quadratically with the size of the collection. Hence, the time complexity of this operation is O(n^2), where n is the size of the collection being iterated over. . for i in numbers: for j in numbers: print(i,j) . Space . This function takes two matrices matrix1 and matrix2 as input and returns their product as a new matrix. The function creates a new matrix result with dimensions m by n to store the product of the input matrices. The size of result depends on the size of the input matrices, so the space complexity of this function is O(n^2). As the size of the input matrices increases, the amount of memory required to execute the function also increases quadratically. . Main take away is that a new matrix is created. | . def multiply_matrices(matrix1, matrix2): m = len(matrix1) n = len(matrix2[0]) result = [[0] * n] * m #this creates the new matrix based on the size of matrix 1 and 2 for i in range(m): for j in range(n): for k in range(len(matrix2)): result[i][j] += matrix1[i][k] * matrix2[k][j] return result print(multiply_matrices([[1,2],[3,4]], [[3,4],[1,2]])) . Logarithmic O(logn) . Time . An example of a log time algorithm is binary search. Binary search is an algorithm that searches for a specific element in a sorted list by repeatedly dividing the search interval in half. As a result, the time taken to complete the search grows logarithmically with the size of the list. Hence, the time complexity of this operation is O(log n), where n is the size of the list being searched. . def binary_search(arr, low, high, target): while low &lt;= high: mid = (low + high) // 2 #integer division if arr[mid] == target: return mid elif arr[mid] &lt; target: low = mid + 1 else: high = mid - 1 target = 263 result = binary_search(numbers, 0, len(numbers) - 1, target) print(result) . Space . The same algorithm above has a O(logn) space complexity. The function takes an array arr, its lower and upper bounds low and high, and a target value target. The function searches for target within the bounds of arr by recursively dividing the search space in half until the target is found or the search space is empty. The function does not create any new data structures that depend on the size of arr. Instead, the function uses the call stack to keep track of the recursive calls. Since the maximum depth of the recursive calls is O(logn), where n is the size of arr, the space complexity of this function is O(logn). As the size of arr increases, the amount of memory required to execute the function grows logarithmically. . Exponential O(2^n) . Time . An example of an O(2^n) algorithm is the recursive implementation of the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, starting from 0 and 1. The recursive implementation of the Fibonacci sequence calculates each number by recursively calling itself with the two preceding numbers until it reaches the base case (i.e., the first or second number in the sequence). The algorithm takes O(2^n) time in the worst case because it has to calculate each number in the sequence by making two recursive calls. . Fibonacci . def fibonacci(n): if n &lt;= 1: return n else: return fibonacci(n-1) + fibonacci(n-2) #print(fibonacci(5)) #print(fibonacci(10)) #print(fibonacci(20)) print(fibonacci(30)) #print(fibonacci(40)) . 832040 . Space . This function takes a set s as input and generates all possible subsets of s. The function does this by recursively generating the subsets of the set without the first element, and then adding the first element to each of those subsets to generate the subsets that include the first element. The function creates a new list for each recursive call that stores the subsets, and each element in the list is a new list that represents a subset. The number of subsets that can be generated from a set of size n is 2^n, so the space complexity of this function is O(2^n). As the size of the input set increases, the amount of memory required to execute the function grows exponentially. . def generate_subsets(s): if not s: return [[]] subsets = generate_subsets(s[1:]) return [[s[0]] + subset for subset in subsets] + subsets print(generate_subsets([1,2,3])) #print(generate_subsets(numbers)) . [[1, 2, 3], [1, 2], [1, 3], [1], [2, 3], [2], [3], []] . Using the time library, we are able to see the difference in time it takes to calculate the fibonacci function above. . Based on what is known about the other time complexities, hypothesize the resulting elapsed time if the function is replaced. | . import time start_time = time.time() print(fibonacci(34)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) start_time = time.time() print(fibonacci(35)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) . Hacks . Record your findings when testing the time elapsed of the different algorithms. | . From fastest to slowest Constant: typically the fastest depending on the cost of the procedure Logarithmic: binary search algorithms have logarithmic time complexity. log(x) &lt; x for all x ∈ ℝ. Linear: linear proportional relationship between input and iterations Quadratic: nested loops usually have this complexity Exponential: highest time complexity; usually indicative of recursion . Although we will go more in depth later, time complexity is a key concept that relates to the different sorting algorithms. Do some basic research on the different types of sorting algorithms and their time complexity. | . Selection Sort: . Sorts by repeatedly finding the minimum element from the unsorted portion of the list and swapping it with the first element of the unsorted portion. | Time complexity: O(n^2) | . Insertion Sort: . Builds a sorted list by repeatedly inserting elements from the unsorted portion of the list into the correct position in the sorted portion. | Time complexity: O(n^2) | . Merge Sort: . Divides the list into halves, sorts each half recursively, and then merges the sorted halves. | Time complexity: O(n*log(n)) | . Quick Sort: . Chooses a pivot element, partitions the list into elements less than the pivot and elements greater than the pivot, and recursively sorts the partitions. | Time complexity: O(n*log(n)) on average, but O(n^2) in the worst case. | . Bubble Sort: . Sorts by repeatedly swapping adjacent elements that are in the wrong order. | Time complexity: O(n^2) . | Why is time and space complexity important when choosing an algorithm? . | . Considerations should be made for space and time complexity to ensure that algorithms being used are both memory and time-efficient. . Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? | . It is difficult to implement constant time algorithms for all use cases because they have very narrow ranges of input. They are typically only implemented for a small set of inputs. . Although exponential time algorithms may be easy to write, they typically lack optimization and usually can be rewritten into a more efficient format. However, an exponential time algorithm may be required based on the requirements. . What are some general patterns that you noticed to determine each algorithm&#39;s time and space complexity? | . Looking at loop mechanisms and other control patterns can be used to determine an algorithm&#39;s time and space complexity. CollegeBoard likely will not ask students to determine the time or space complexity of overly complex algorithms and thus additional elaboration is not needed. . Complete the Time and Space Complexity analysis questions linked below. Practice . O(n + m) time, O(1) space | O(n^2) | O(n) * O(log(n)) = O(nlog(n)) | X will always be a better choice for large inputs (asymptotic = lim n-&gt;inf) | O(log(n)) | Both -- time and memory are important algorithm considerations | By counting the number of primitive operations performed by the algorithm on a given input size | O(log_k(n)) -- k**log_k(n) = n | sum(i(i-1)/2) for i=0 to n-1 = n(n-1)*(2n-1)/6 -&gt; O(n^2) | False -- not necessarily, Big-O notation is an asymptotic view of the algorithm |",
            "url": "https://safinsingh.github.io/fastpages-apcsp/2023/03/22/space-time-comp.html",
            "relUrl": "/2023/03/22/space-time-comp.html",
            "date": " • Mar 22, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 2.4B",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? A database schema is a blueprint that defines the structure and organization of a database. It includes the tables, columns, relationships, constraints, and other elements that make up the database. . What is the purpose of identity Column in SQL database? An identity column in SQL database is a special column that automatically generates a unique value for each row inserted into the table. It&#39;s commonly used as a primary key to identify and link related records. . | What is the purpose of a primary key in SQL database? The primary key in SQL database is a column or set of columns that uniquely identifies each row in a table. It provides a means of linking related records through foreign key relationships. . | What are the Data Types in SQL table? Data types in SQL tables are used to define the type of data that can be stored in each column of the table. Numeric, character, date/time, binary, and Boolean data types are the main types used in SQL. Each type has its own format and limitations on the data that can be stored in it. . | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? | . A connection object is an object that represents a connection to a database. It provides methods for establishing and managing connections to the database, as well as for executing SQL statements and retrieving data from the database. Based on Google search results, a connection object is used to establish a connection to a database, and it provides methods for executing SQL commands on the database. . Same for cursor object? | . A cursor object is an object that represents a database cursor. It provides methods for iterating over the results of a database query, as well as for fetching individual rows of data. Based on Google search results, a cursor object is used to interact with the database and execute SQL commands, and it provides methods for working with the result set returned by a query. . Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | . The attributes of a connection object and cursor object in the VSCode debugger may vary depending on the specific implementation and the type of database being used. However, some common attributes of a connection object include closed, database, host, port, and protocol version. Some common attributes of a cursor object include arraysize, description, rowcount, and lastrowid. . Is &quot;results&quot; an object? How do you know? | . &quot;Results&quot; is not a generic object, but it could be an object depending on the context. It could refer to the result set returned by a query, which would be an object containing the rows of data returned by the query. Whether &quot;results&quot; is an object or not depends on the specific implementation and context in which it is used. . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compare create() in both SQL lessons. What is better or worse in the two implementations? . Better implementations are those that are more efficient, readable, and easier to maintain. | Worse implementations are those that are less efficient, harder to read, and more difficult to maintain. | . | Explain purpose of SQL INSERT. Is this the same as User init? . The purpose of SQL INSERT is to add new rows of data to a database table. | SQL INSERT allows you to specify the values for each column in the new row or insert values derived from a subquery. | SQL INSERT is not the same as User __init__ in Python classes, as SQL INSERT is used to modify the data stored in a database table while User __init__ is used to initialize the attributes of a Python object. | . | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . Explain try/except, when would except occur? | . try/except is a control flow statement used in Python to handle exceptions that may occur during program execution. The try block contains the code that may raise an exception, while the except block contains the code that is executed if an exception is raised. The except block is only executed if an exception is raised in the try block. The purpose of using try/except is to gracefully handle exceptions and prevent the program from crashing. . What code seems to be repeated in each of these examples to point, why is it repeated? . | Code that appears to be repeated in different examples includes:- Importing the sqlite3 library - Defining the conn and cursor objects . Using the cursor.execute() method to run SQL commands | Calling conn.commit() to commit changes to the database | Closing the cursor and conn objects | . | This code is repeated because it is necessary to establish a connection to the database and perform SQL commands. cursor.execute() is used to run the desired SQL code, such as update, delete, or read operations. conn.commit() is used to commit changes to the database and make them permanent. Closing the cursor and conn objects is important to ensure that working connections and cursors are closed properly, especially when working with servers, and to prevent unnecessary resource usage. . | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? | . DELETE is a potentially dangerous operation because it has the ability to remove information from a database. If used incorrectly or in the wrong hands, it can accidentally delete important information. However, DELETE is also necessary for maintaining a clean and organized database with accurate records. . In the print statements, what is the &quot;f&quot; and what does {uid} do? | . In the print statements, the &quot;f&quot; before the string allows for formatted string interpolation in Python. The curly braces containing the uid variable indicate that the value of uid should be inserted into the string at that location. This allows for the easy inclusion of variable values in string output without having to concatenate multiple strings. . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? The menu repeats because there are multiple comparisons for the operations in CRUD. This could be replaced with a match statement or a list. | Could you refactor this menu? Make it work with a List? Yes, it could be refactored with a list for all the different operations | . def menu(): options = {&#39;c&#39;: create, &#39;r&#39;: read, &#39;u&#39;: update, &#39;d&#39;: delete, &#39;s&#39;: schema} operations = {&#39;c&#39;: &#39;Create&#39;, &#39;r&#39;: &#39;Read&#39;, &#39;u&#39;: &#39;Update&#39;, &#39;d&#39;: &#39;Delete&#39;, &#39;s&#39;: &#39;Schema&#39;} operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) try: choice = options[operation.lower()] print(f&quot;Selected option: {operations[operation.lower()]}&quot;) choice() except KeyError: if len(operation) == 0: return else: print(&quot;Please enter a valid option.&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? Yes, I implemented procedural abstraction because of the above code blocks. This is a particular example: | . def menu(): options = {&#39;c&#39;: create, &#39;r&#39;: read, &#39;u&#39;: update, &#39;d&#39;: delete, &#39;s&#39;: schema} operations = {&#39;c&#39;: &#39;Create&#39;, &#39;r&#39;: &#39;Read&#39;, &#39;u&#39;: &#39;Update&#39;, &#39;d&#39;: &#39;Delete&#39;, &#39;s&#39;: &#39;Schema&#39;} operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) . This shows the use of a dictionary to parse the user input and map it to a specific operation. . In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . See BST Map Abstraction . Reference... sqlite documentation .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 2.4A",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. | . Flask app object We used this in trimester 2 when creating a web API. Routes and blueprints were added to the Flask app object to handle HTTP requests. . | SQLAlchemy db object The SQLAlchemy DB object is an interface to add, fetch, and edit database rows stored in the SQLite format. . | &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User Defines the user class with an id, name, uid, password, and dob fields. Each of the fields have their own columns in the SQLite database and have their own getters and setters that reference the private variables. | db.Model inheritance Inherits all database manipulation methods to insert records into database. Also inherits class variables from parent class. | init method Defines behavior of constructor which sets a default password and date of birth when the object is constructed. | @property, @&lt;column&gt;.setter Access private class variables within class to provide encapsulation. Also has custom setter behavior. | create, read, update, delete methods INSERTs, SELECTs, performs other SQL operations to manipulate rows in the database. Interacts directly at the SQLite database file. | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.add(self) # performs update when id exists db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object Loops through all the user options and inserted them one-by-one using an INSERT statement. The db object is referenced when the create() method is called. | User Object Constructors Each constructor has parameters for their name, uid, password, and date of birth. These are set as properties of the object in its constructor. | Try / Except The try/except construction is used to catch any database errors that arise from inserting records. Some of these are duplicate or ill-typed data. | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by Filter all rows with a specific UID and return the first one. The ID is a unique column so there should only be one row returned by the query. | user.password Return the user&#39;s password from the database in a hashed format. | | . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following . user.find_by_uid() and try/except . Find by the UID of the user. Returns the row containing the user data. . | user = User(...) . Call to constructor of the User class creating a new user and storing it in the user variable. The parameters name, uid, and password are returned. . | user.dob and try/except . Sets the current date of birth based on the input. The input is parsed using the datetime library. . | user.create() and try/except . Creates the user in the database and saves it by serializing data into the SQLite format. . | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all Return all users in the users database. | json_ready assignment, google List Comprehension Calls the read method on all the users in the list and creates a new list with the JSON format of all users in the database. | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | . from sqlalchemy import Column, Integer, String, Boolean from .. import db import random class Todo(db.Model): __tablename__ = &quot;todos&quot; id = Column(Integer, primary_key=True) _text = Column(String(255), nullable=False) _completed = Column(Boolean, nullable=False) def __init__(self, text, completed=False): self._text = text self._completed = completed def __repr__(self): return &quot;&lt;Todo(id=&#39;%s&#39;, text=&#39;%s&#39;, completed=&#39;%s&#39;)&gt;&quot; % ( self.id, self.text, self.completed, ) @property def text(self): return self._text @text.setter def text(self, value): self._text = value @property def completed(self): return self._completed @completed.setter def completed(self, value): self._completed = value def to_dict(self): return {&quot;id&quot;: self.id, &quot;text&quot;: self.text, &quot;completed&quot;: self.completed} def random_bool(): return bool(random.getrandbits(1)) def todos_table_empty(): return len(db.session.query(Todo).all()) == 0 def init_todos(): if not todos_table_empty(): return menial_tasks = [ &quot;Wash the dishes&quot;, &quot;Walk the dog&quot;, &quot;Take out the trash&quot;, &quot;Mop the floor&quot;, &quot;Do the laundry&quot;, ] todos = [Todo(task, completed=random_bool()) for task in menial_tasks] for todo in todos: try: db.session.add(todo) db.session.commit() except Exception as e: print(&quot;error while creating todos: &quot; + str(e)) db.session.rollback() . from flask import Blueprint, request from flask_restful import Api, Resource, reqparse from .. import db from ..model.todos import Todo todo_bp = Blueprint(&quot;todos&quot;, __name__) todo_api = Api(todo_bp) class TodoAPI(Resource): def get(self): id = request.args.get(&quot;id&quot;) todo = db.session.query(Todo).get(id) if todo: return todo.to_dict() return {&quot;message&quot;: &quot;todo not found&quot;}, 404 def post(self): parser = reqparse.RequestParser() parser.add_argument(&quot;text&quot;, required=True, type=str) args = parser.parse_args() todo = Todo(args[&quot;text&quot;]) try: db.session.add(todo) db.session.commit() return todo.to_dict(), 201 except Exception as e: db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 # CRUD update functionality def put(self): parser = reqparse.RequestParser() parser.add_argument(&quot;id&quot;, required=True, type=int) args = parser.parse_args() try: todo = db.session.query(Todo).get(args[&quot;id&quot;]) if todo: todo.completed = not todo.completed db.session.commit() return todo.to_dict() else: return {&quot;message&quot;: &quot;todo not found&quot;}, 404 except Exception as e: db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 # CRUD delete functionality def delete(self): parser = reqparse.RequestParser() parser.add_argument(&quot;id&quot;, required=True, type=int) args = parser.parse_args() try: todo = db.session.query(Todo).get(args[&quot;id&quot;]) if todo: db.session.delete(todo) db.session.commit() return todo.to_dict() else: return {&quot;message&quot;: &quot;todo not found&quot;}, 404 except Exception as e: db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 class TodoListAPI(Resource): def get(self): try: todos = db.session.query(Todo).all() return [todo.to_dict() for todo in todos] except Exception as e: db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 def delete(self): try: db.session.query(Todo).delete() db.session.commit() return [] except Exception as e: db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 todo_api.add_resource(TodoAPI, &quot;/todo&quot;) todo_api.add_resource(TodoListAPI, &quot;/todoList&quot;) .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit 2.3",
            "content": "Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # A: nil ID, non-numeric year # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? # A: after data collection . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390], &quot;duration&quot;: [50, 40, 45] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3 entries, day1 to day3 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 3 non-null int64 1 duration 3 non-null int64 dtypes: int64(2) memory usage: 180.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . Early Seed award . Add this Blog to you own Blogging site. | Have all lecture files saved to your files directory before Tech Talk starts. Have data.csv open in vscode. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Amazing. . | When choosing a data set, think about the following... . Does it have a good sample size? Yes, the amount of pixel values in a medium size image results in a large data set. | . | Is there bias in the data? No, image pixels do not have bias. | . | Does the data set need to be cleaned? The data set does not need to be cleaned because all pixel values extracted by PIL are in a standardized format. | . | What is the purpose of the data set? The purpose of the data set is to find the most prominent approximate color value in the image. | . | ... | . | Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) . | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. . Here are some suggestions... . Titanic Dataset:This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. | Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | . These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset... . Kaggle:The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. | UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning Visit Tutorials Point . Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python. . Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . | Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. . Decision Trees, prediction by a piecewise constant approximation. | Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . DecisionTreeClassifier Accuracy: 0.7705882352941177 LogisticRegression Accuracy: 0.788235294117647 . /Users/johnmortensen/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "MC3 Review",
            "content": "Score: 46/50 . Q30 . In the following expression, the variable truckWeight has the value 70000 and the variable weightLimit has the value 80000. What value does the expression truckWeight &lt; weightLimit evaluate to? . Correct Answer: true . This was a silly mistake. The correct answer is true because 70000 &lt; 80000. . Q41 . A large number of genetic codes are stored as binary values in a list. Which one of the following conditions must be true in order for a researcher to obtain the correct result when using a binary search algorithm to determine if a given genetic code is in the list? . Correct Answer: The list must be sorted based on the genetic code values. . This is the correct answer because binary search requires the input list to be sorted. Otherwise, the constructed binary tree will be inaccurate and comparisons at midpoints within sublists will not yield the correct result. . Q49 . A city planner is using simulation software to study crowd flow out of a large arena after an event has ended. The arena is located in an urban city. Which of the following best describes a limitation of using a simulation for this purpose? . Correct Answer: The model used by the simulation software often omits details so that it is easier to implement. . This is the correct answer because: . By process of elimination, the following must be incorrect: “The model used by the simulation software cannot be modified once the simulation has been used”: this is incorrect because software can always be modified after being run | “Running a simulation requires more time to generate data from trials than observing the crowd exiting the arena at various events”: this is incorrect because simulations typically require much less time and resources, especially when done at a large scale, such as the situation in the prompt | “Running a simulation requires a large number of observations to be collected before it can be used to explore a problem”: this is incorrect because observations are not necessarily required prior to running simulations. Conclusions can be drawn by running many simulations | . | Simulations are often used for ease of observation, causing engineers to omit small details in the process of creating them | Q50 . A computer scientist is analyzing four different algorithms used to sort a list. The table below shows the number of steps each algorithm took to sort lists of different sizes. . List Size Number of Steps for Algorithm A Number of Steps for Algorithm B Number of Steps for Algorithm C Number of Steps for Algorithm D . 1 | 10 | 2 | 1 | 1 | . 2 | 20 | 4 | 2 | 4 | . 3 | 30 | 8 | 6 | 9 | . 4 | 40 | 16 | 24 | 16 | . 5 | 50 | 32 | 120 | 25 | . Based on the values in the table, which of the algorithms appear to run in reasonable time? . Correct Answer: A, B, D . This is the correct answer because Algorithm C runs in factorial time, which is considered inefficient. Algorithms A, B, and D run in linear, exponential, and square time respectively, which are considered “efficient”. .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/ap/2023/03/08/cb-quiz2.html",
            "relUrl": "/markdown/csp/ap/2023/03/08/cb-quiz2.html",
            "date": " • Mar 8, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 2.2",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | . Through the bash shell, the cd, ls, and cat commands are examples of tools that can be used to list and access files or directories. . What are the command you use in Windows terminal to access files? | . Through the batch shell on Windows, the dir, notepad, and cd commands are examples of tools that can be used to list and access files or directories. . What are some of the major differences? | . Windows uses backslashes ( ) to separate directories in paths. Linux uses forward slashes (/) to separate directories in paths. Windows paths start with the drive letter (ex. C:). The Windows dir command file list format is different from that of Linux ls. Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | . Images are stored in files and folders. . How does the meta data source and label relate to Unit 5 topics? | . The metadata often contains image size and other releveant information such as aperature or location. . Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . IPython is an interactive shell for Python and can be used to display images. . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;../images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-256.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Base64 is an alphanumeric encoding format that expresses numbers 0-63 in a single character. It is more compact than binary and decimal because it has a higher base. . Translate first 3 letters of your name to Base64. | . Saf --&gt; U2Fm . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | . Video players such as YouTube buffer videos in order to avoid loading largue amounts of data at a single time. Instead, small portions are loaded as the video is played, placing less stress on the network that the device is connected too. . From your consumer experience, what effects have you experienced from buffering? | . Video lag is often an issue when buffering is used. If a device disconnects from a network during video playback, portions of the video aren&#39;t able to load, leading to a negative user experience. . How do these effects apply to images? | . Buffering is often used with images to handle byte manipulation (adding certain effects to images). . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | . Yes, a series of steps are being performed. . Describe Grey Scale algorithm in English or Pseudo code? | . Load all images into memory | Average all pixel values to obtain a greyscale representation of each pixel | Reconstruct an image from the new pixel array | Describe scale image? What is before and after on pixels in three images? | . scale_image resizes all images to a smaller pixel size. The pixels are likely averaged in order to &quot;compress&quot; them into a smaller size. . Is scale image a type of compression? If so, line it up with College Board terms described? | . Scaling an image down is a type of lossy compression. Image quality is lost but the file size is often drastically reduced. . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;../images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-original.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL:image manipulation library. Used to get image metadata, Base64 format, and inner data.- numpy: number manipulation library. Used to manipulate large arrays and perform complex linear algebra operations. | base64: encoding format used to store image data and display it in HTML. | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_inv = self.image_to_html_inv() self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey @property def html_inv(self): return self._html_inv # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # Create Inverted Grey Scale Base64 representation of Image def image_to_html_inv(self): img_inv = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array inv_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: inv_data.append((255-pixel[0], 255-pixel[1], 255-pixel[2])) # end for loop for pixels img_inv.putdata(inv_data) return self.image_to_html(img_inv) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;../images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-original.jpg&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Smiley&quot;, &#39;file&#39;: &quot;smiley.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; inverted image &quot;) display(HTML(ido.html_inv)) print(&quot; inverted grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . inverted image . inverted grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . inverted image . inverted grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano-original.jpg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . inverted image . inverted grey image . - meta data -- Smiley Internet smiley.jpg JPEG RGB Original size: (497, 499) Scaled size: (320, 321) -- scaled image -- . inverted image . inverted grey image . . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . The solid-colored squares will have completely lossless compression and scaling because all pixel RGB values are the same. Each average taken in the compression algorithm will maintain pixel values from the original image. More detailed images, such as the clouds-impression.png image, will likely result in more lossy compression because pixel averages will not maintain original values and the image will become more fuzzy. . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . My project doesn&#39;t currently require the use of images. . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | . See above example for inverted greyscale image algorithm. .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/2023/03/07/AP-unit2-2.html",
            "relUrl": "/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "N@tM Trimester 2",
            "content": ". We all attended N@tM and presented to Mr. Mortensen as a team. Amay and David in particular presented the new features they added. . . Another project I found particularly interested was a food and calorie calculator. The user can store their nutrition information and it would be saved to the database. .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/ap/2023/02/27/natm2.html",
            "relUrl": "/markdown/csp/ap/2023/02/27/natm2.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "5.5/5.6 Reflection",
            "content": "5.5 . When you create a GitHub repository it requests a license type. Review the license types in relationship to this Tech Talk and make some notes in your personal blog. | Types of Licenses: Open Source Licenses Definition: Allows anyone to use the program without needing to pay | Example: MIT License | . | Closed Source Licenses Definition: Require payment to authors based on what user makes from distribution | . | Creative Commons Zero v1.0 Universal Definition: Allows for the public to use the material without any copyright restrictions | . | Open Source MIT License Definition: Allows for code to be used and then made into a closed source version for distribution | Requirements: Authors still want credit (comments) | . | Open Source GPL License Definition: People can do anything with the project except distribute | Example: GNU GPLv3 | . | . | . In your blog, summarize the discussions and personal analysis on Software Licenses/Options, Digital Rights, and other Legal and Ethical thoughts from this College Board topic. | Reasons for Choosing Open Source GPL for Group Project . To allow others to use and learn from the program | To prevent unauthorized distribution for personal gain | To promote open access to such programs | . | Legality and Ethics Considerations . Giving credit to sources used | Using digital rights to prevent piracy | Support for income generation by large companies | . | Use of Open Source Licenses in Class . Encouraging learning and sharing of code | Understanding the role of licenses in income generation for companies | Balancing open access with profitability considerations | . | . Make a license for your personal (blog) and Team repositories for the CPT project. Be sure to have a license for both Team GitHub repositories (frontend/backend). Document license(s) you picked and why. FYI, frontend, since it is built on GitHub pages may come with a license and restrictions. Document in blog how team made license choice and process of update. | Reasons for Choosing Open Source GPL License . To allow others to modify the code for learning purposes | To prevent unauthorized distribution for personal gain | To promote learning and experimentation with coding | . | Use of GPL License for Fastpages and Group Flask and Github Pages Website . Encouraging exploration and development of code | Balancing open access with the need to protect intellectual property | Fostering a community of learning and innovation in coding | . | . 5.6 . Describe PII you have seen on project in CompSci Principles. | Password usage in example CPT project | Classroom-specific information (class numbers, periods, etc.) | Names, emails, birthdays | . What are your feelings about PII and your personal exposure? | Violation of Privacy Rights PII includes sensitive information such as full name, address, social security number, etc. | Sharing this information without consent can be a violation of privacy rights | . | Increased Risk of Identity Theft and Fraud PII is often used by criminals to steal identities and commit fraud | Sharing PII can increase the risk of identity theft and fraud | . | Legal Consequences Many laws and regulations, such as the General Data Protection Regulation (GDPR) in the European Union, regulate the handling of PII | Sharing PII without proper safeguards and consent can result in legal consequences | . | Damaged Reputation Sharing PII can damage the reputation of both the individual and the organization involved | Trust and credibility can be lost, leading to negative consequences for both parties | . | . Describe good and bad passwords? What is another step that is used to assist in authentication. | Characteristics of Good Passwords . Length Longer passwords are more secure | . | Complexity A mix of upper and lower case letters, numbers, and symbols makes a password stronger | . | Uniqueness Avoid using easily guessable information such as birthdate, name, etc. | . | Regular Updates Regularly changing passwords adds an extra layer of security | . | . | Characteristics of Bad Passwords . Short Length Shorter passwords can be easily cracked | . | Lack of Complexity Using only letters or simple patterns makes passwords easy to guess | . | Commonness Using commonly used passwords such as “password123” or “123456” is not secure | . | Infrequency of Updates Not regularly changing passwords leaves the password vulnerable to being cracked | . | . | Additional Step for Authentication . Two-Factor Authentication (2FA) Adds an extra layer of security by requiring a second form of identification, such as a fingerprint or code sent to a phone | Increases the difficulty for unauthorized access to an account | . | . | . Try to describe Symmetric and Asymmetric encryption. | Symmetric Encryption . Definition Symmetric encryption uses the same key for both encryption and decryption of data | . | Process The sender and receiver must both have the same key in order to encrypt and decrypt the data | . | Advantages Faster and more efficient than asymmetric encryption | Suitable for large amounts of data | . | . | Asymmetric Encryption . Definition Asymmetric encryption uses two different keys for encryption and decryption of data | . | Process The sender uses the recipient’s public key to encrypt the data, and the recipient uses their private key to decrypt the data | . | Advantages More secure than symmetric encryption | Suitable for exchanging small amounts of data, such as keys for symmetric encryption | . | . | . Provide an example of encryption we used in AWS deployment. | SSH into AWS Box Definition Secure Shell (SSH) is a protocol used for secure access to remote servers | . | Use in AWS Deployment SSH is used to securely log into an AWS instance and manage it from a remote location | . | Process A user generates an SSH key pair, with a private key kept on their local machine and a public key added to the AWS instance | The user can then use the private key to log into the AWS instance and securely access and manage it | . | Advantages Provides secure access to AWS instances | Enhances the security of data by avoiding the need to transmit login credentials over the network | . | . | . Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. | Hypothetical Phishing Scheme . Definition A phishing scheme is a fraudulent attempt to steal sensitive information, such as login credentials or financial information, by posing as a trustworthy entity | . | Example A phishing email that appears to be from a well-known bank or financial institution, asking the recipient to click on a link to update their account information | The link takes the recipient to a fake website that looks like the real bank’s site, where they are prompted to enter their login credentials and other sensitive information | . | Result If the recipient enters their information, the phisher can use it to access their accounts and steal their money or sensitive data | . | . | Other Phishing Techniques . Email Spoofing Creating fake emails that appear to be from a trusted source, such as a bank or a friend | . | Social Engineering Manipulating people into revealing confidential information, such as passwords or credit card numbers | . | SMiShing Phishing attacks via text message | . | Vishing Phishing attacks via phone calls | . | Spear Phishing Targeted phishing attacks that use personal information, such as the recipient’s name, to make the email appear more credible | . | . | .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/ap/2023/02/13/55-56.html",
            "relUrl": "/markdown/csp/ap/2023/02/13/55-56.html",
            "date": " • Feb 13, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "5.3/5.4 Reflection",
            "content": "5.3 . Intentional or Purposeful bias . think about “What age groups use Facebook” vs “… TikTok”? What does the data say? Is there purposeful exclusion in these platforms? Is it harmful? Should it be corrected? Is it good business? . Data suggests that Facebook is more popular among older age groups (Gen X, Baby Boomers) | TikTok is more popular among younger generations (Gen Z) | There’s a noticeable age divide between the two platforms | The exclusion is likely purposeful, although it’s not necessarily harmful It is effective business because ads can be targeted to specific age groups | . | . Why do virtual assistants have female voices? Amazon, Alexa Google, Apple Siri. Was this purposeful? Is it harmful? Should it be corrected? Is it good business? . Purpose of having female voices is unclear, but some theories suggest it’s because they are perceived as more helpful and trustworthy | Others argue that it reinforces harmful gender stereotypes and reinforces patriarchal norms | Some people believe it should be corrected by offering a wider range of voice options, including male and non-binary voices | I personally don’t see it as something that needs to be immediately corrected because there are already options to change it and it does not seem to cause major issues | Based on its benefits, having a female virtual assistant voice is likely a good business and leads to more interaction | . Talk about an algorithm that influences your decisions, think about these companies (ie FAANG - Facebook, Amazon, Apple,Netflix, Google) . Netflix’s reccomendation algorithm is based on previously watched shows | Provides more content to users to keep them hooked onto the platform in a cycle | . HP Video . Does the owner of the computer think this was intentional? If yes or no, justify you conclusion. . Yes, the owner thinks it was intentional. They explicitly stated that the computer was “racist” because it was not able to track him using the camera software. . How do you think this happened? Is this harmful? Was it intended to be harmful or exclude? . I think this happened due to a lack of testing with darker skin tones. It was most likely not intended to be harmful or to exclude, but was rather a mistake in the software development process. . Should it be corrected? What would you or should you do to produce a better outcome? . It should be corrected in order to bring more inclusiveness to HP products and their platform as a whole. I would ensure that I cover all test cases before releasing a product to production. This way, the amount of issues with the polished product would be minimal. . 5.4 . CompSci has 150 ish principles students. Describe a crowdsource idea and how you might initiate it in our environment? . One idea regarding “crowdsourcing” could be contributing to a shared GitHub repository. Each student can program their individual features in order to accomplish a very large task. One could initiate this by counting each contribution towards the students’ grades. This way, they will be forced to provide code to the class repository. . What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? . I think that our project could be better with crowdsourcing through the crowdsourcing of data. We could have more users testing and entering our information on our platform. This way, we could find more niche bugs and accept feature requests from a large audience. As a result, our product would likely appeal more to a larger audience once it’s complete. . What kind of data could you capture at N@tM to make evening interesting? Perhaps use this data to impress Teachers during finals week. . At N@tM, we could collect user data and display it in an organized manner. One way we could do this is by performing statistical analyses on metrics we gather from user data. For example, we could collect and display average note length, calculator usage, and timer usage. .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/ap/2023/02/06/5354-notes.html",
            "relUrl": "/markdown/csp/ap/2023/02/06/5354-notes.html",
            "date": " • Feb 6, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "MCQ",
            "content": "CollegeBoard MCQ . I got 50/50 on the CollegeBoard MCQ. . . I didn’t have much trouble with the questions. One thing that I took away from this activity was that I should take my time on every question and check my answers along the way. For the final MCQ, I will be sure to spend time on each question individually. .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/2023/01/31/mcq.html",
            "relUrl": "/markdown/csp/2023/01/31/mcq.html",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "College Board CPT Plan",
            "content": "College Board CPT Plan . Outline . My feature planned for the Create Performance Task is a todo list where a user can manipulate a series of todos via addition, deletion, and completion. I plan to satisfy all the CollegeBoard criteria as such: . Program Purpose and Function: I will describe the input, program functionality, and output of the addTodo procedure within my code. The input is the text of the new todo to be added. The functionality is that it creates a new JavaScript object containing the todo text and a completion status. It then creates a new list from the todo list but adds the new todo to it. The output is the newly created todo list. The output of the addTodo function will be passed to the setTodos function, which displays the todos on screen. | Data Abstraction: I will describe how my data is stored in a list and how it contributes to the program function. I will describe how the todos are added to a central list which are manipulated by the addTodo, deleteTodo, and completeTodo functions. The list will be used for the rendering function that uses the todoList as input and renders the resulting todos on the HTML page. | Managing Complexity: the todo list manages complexity within the program by storing all the todos in an ordered fashion. It allows for the manipulation of a set of todos using addition, deletion, and completion functions. I will discuss how it is a replacement for storing todos individual variables and is much more easy to program this way. | Procedural Abstraction: I will discuss how my student-developed completeTodo procedure has an input of a todo ID, searches for a todo within a list by its ID, and modifies its completion status based on the procedure’s completed parameter. It contributes to the program function because it is essential for toggling the todo’s status when a user has either completed or marked a todo incomplete. | Algorithm Implementation: I will discuss the render algorithm within my todo program. The render algorithm leverages sequencing as it loops through the entire list of todos. It leverages selection by using an if statement to determine whether each todo it’s looping through is completed or not. Based on the result, it toggles the CSS completed class to alter the appearance of the todo. Iteration is used within the for loop to increment the index of the selected todo in the todoList. | Testing: I will write a testing procedure that tests the state of the todoList after running the addTodo, removeTodo, and completeTodo respectively. It will ensure that each procedure works properly by asserting whether the todoList contains the expected values after each method. It will print the result of each test in order to properly identify the result of each call. | . Video Plan . I plan to cover all of the above points comprehensively in my video. I will address all of the CollegeBoard criteria as specified in the rubric and detailed above. .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/ap/2023/01/31/cb-cpt-plan.html",
            "relUrl": "/markdown/csp/ap/2023/01/31/cb-cpt-plan.html",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "5.1/5.2 Reflection",
            "content": "5.1/5.2 . Think of three beneficial effects of your projects based on 5.1 Unit: . My todo list can be used by students to manage the complexity of life—they can plan their homework tasks out in advance. | The timer system can be used in combination with the todo list to section our students’ time into smaller intervals, decreasing procrastination. | The school schedule system can be used to remember your schedule. This is especially useful for students in a new trimester or who are new to their school because it allows them to view all their classes and the schedule for each day. | Think of a potential harmful effect of your project. Answer with an opinion and learnings so far this year: . A potential harmful aspect of our project is that the calculator could cause students to get lazy. Not doing arithmetic by hand can cause them to lose their basic mental math skills. . What are pros/cons on internet blockers at router and lack of admin password on lab machines at school? . Pros: . Enforcing a common firewall for all students across the school district allows administrators to block potentially dangerous sites that may be inappropriate or contain malware | Lack of admin access ensures that students cannot mess with district internals or get access to information such as other students’ grades Cons: | Students are often restricted from services such as AWS due to the restrictive firewall policy, which hinders learning | . What concerns do you have personally about the digital divide? For yourself or for others. . Personally, one concern is that the digital divide perpetuates social and economic inequality. It means that individuals from lower income backgrounds are less likely to have access to technology and the internet, leading to a lack of access to resources and opportunities that are essential for their future prospects. This includes a lack of access to quality education, job opportunities, and basic information and services, which can greatly impact their ability to succeed in today’s society. For others, the digital divide also raises concerns about the potential for an even larger divide in the future as technology continues to advance. Without proper access to technology and digital skills, these individuals will be left behind and face even greater challenges in the future job market and in their daily lives. Furthermore, the digital divide can also lead to a lack of digital literacy and digital skills, which are increasingly in demand in today’s digital age. Without these skills, individuals will struggle to compete in the job market, leading to even greater economic disparities. In conclusion, the digital divide is a pressing issue that requires immediate attention and action in order to ensure equal opportunities and a more inclusive society. .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/ap/2023/01/31/5152.html",
            "relUrl": "/markdown/csp/ap/2023/01/31/5152.html",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "CPT Grading W3",
            "content": "CPT Grading 3 . Student 1 Grade . Reporting Category Requirements Student Score College Board Score . Program Purpose and Function | input | program functionality | output | describes the overall purpose of the program. | describes what functionality of the program is demonstrated in the video. | describes the input and output of the program demonstrated in the video. | . | 0 | 0 | . Data Abstraction | includes two program code segments: | one that shows how data has been stored in this list (or other collection type). | one that shows the data in this same list being used as part of fulfilling the program’s purpose. | identifies the name of the variable representing the list being used in this response. | describes what the data contained in this list is representing in the program. | . | 0 | 0 | . Managing Complexity | includes a program code segment that shows a list being used to manage complexity in the program. | explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . | 0 | 0 | . Procedural Abstraction | includes two program code segments: | one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. | one showing where the student-developed procedure is being called. | describes what the identified procedure does and how it contributes to the overall functionality of the program. | . | 0 | 0 | . Algorithm Implementation | includes a program code segment of a student-developed algorithm that includes | sequencing | selection | iteration | explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | . | 0 | 0 | . Testing | describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. | describes the condition(s) being tested by each call to the procedure. | identifies the result of each call. | . | 1 | 1 | . Student 2 Grade . Reporting Category Requirements Student Score College Board Score . Program Purpose and Function | input | program functionality | output | describes the overall purpose of the program. | describes what functionality of the program is demonstrated in the video. | describes the input and output of the program demonstrated in the video. | . | 1 | 1 | . Data Abstraction | includes two program code segments: | one that shows how data has been stored in this list (or other collection type). | one that shows the data in this same list being used as part of fulfilling the program’s purpose. | identifies the name of the variable representing the list being used in this response. | describes what the data contained in this list is representing in the program. | . | 1 | 1 | . Managing Complexity | includes a program code segment that shows a list being used to manage complexity in the program. | explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . | 1 | 1 | . Procedural Abstraction | includes two program code segments: | one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. | one showing where the student-developed procedure is being called. | describes what the identified procedure does and how it contributes to the overall functionality of the program. | . | 1 | 1 | . Algorithm Implementation | includes a program code segment of a student-developed algorithm that includes | sequencing | selection | iteration | explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | . | 1 | 1 | . Testing | describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. | describes the condition(s) being tested by each call to the procedure. | identifies the result of each call. | . | 1 | 1 | . Student 3 Grade . Reporting Category Requirements Student Score College Board Score . Program Purpose and Function | input | program functionality | output | describes the overall purpose of the program. | describes what functionality of the program is demonstrated in the video. | describes the input and output of the program demonstrated in the video. | . | 0 | 0 | . Data Abstraction | includes two program code segments: | one that shows how data has been stored in this list (or other collection type). | one that shows the data in this same list being used as part of fulfilling the program’s purpose. | identifies the name of the variable representing the list being used in this response. | describes what the data contained in this list is representing in the program. | . | 1 | 1 | . Managing Complexity | includes a program code segment that shows a list being used to manage complexity in the program. | explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . | 1 | 1 | . Procedural Abstraction | includes two program code segments: | one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. | one showing where the student-developed procedure is being called. | describes what the identified procedure does and how it contributes to the overall functionality of the program. | . | 1 | 1 | . Algorithm Implementation | includes a program code segment of a student-developed algorithm that includes | sequencing | selection | iteration | explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | . | 1 | 1 | . Testing | describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. | describes the condition(s) being tested by each call to the procedure. | identifies the result of each call. | . | 1 | 1 | . Student 4 Grade . Reporting Category Requirements Student Score College Board Score . Program Purpose and Function | input | program functionality | output | describes the overall purpose of the program. | describes what functionality of the program is demonstrated in the video. | describes the input and output of the program demonstrated in the video. | . | 1 | 1 | . Data Abstraction | includes two program code segments: | one that shows how data has been stored in this list (or other collection type). | one that shows the data in this same list being used as part of fulfilling the program’s purpose. | identifies the name of the variable representing the list being used in this response. | describes what the data contained in this list is representing in the program. | . | 1 | 0 | . Managing Complexity | includes a program code segment that shows a list being used to manage complexity in the program. | explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . | 0 | 0 | . Procedural Abstraction | includes two program code segments: | one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. | one showing where the student-developed procedure is being called. | describes what the identified procedure does and how it contributes to the overall functionality of the program. | . | 1 | 1 | . Algorithm Implementation | includes a program code segment of a student-developed algorithm that includes | sequencing | selection | iteration | explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | . | 1 | 1 | . Testing | describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. | describes the condition(s) being tested by each call to the procedure. | identifies the result of each call. | . | 0 | 0 | . Reflection . For the most part, there were little to no discrepancies with any of my scoring and CollegeBoards. On the 4th student’s work, I thought that the student deserved the point for list data usage. However, because they only used a certain attribute of the list, CollegeBoard deemed it unworthy of recieving a 1 in that category. For my project, I’ll make sure to correctly use and explain the usage of data within any list I create so that I don’t miss this point in the future. I am already showcasing this in my implementation of the Todo API which is viewable at this URL The fourth submission did not meet the Data Abstractions criteria for the mentioned reason. It missed Managing Complexity due to insufficient management; it only had a counter which wasn’t enough for the points. Finally, the testing criteria was not met due to a lack of arguments for the tester function. .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/ap/2023/01/23/w3-cpt-grades.html",
            "relUrl": "/markdown/csp/ap/2023/01/23/w3-cpt-grades.html",
            "date": " • Jan 23, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "CPT Grading W2",
            "content": "Student 1 . Grading . Category Requirements Student Score CB Score . Program Purpose and Function | ✅ input✅ program functionality✅ output✅ describes the overall purpose of the program.✅ describes what functionality of the program is demonstrated in the video.✅ describes the input and output of the program demonstrated in the video. | 1 | 0 | . Data Abstraction | ✅ includes two program code segments:✅ one that shows how data has been stored in this list (or other collection type).✅ one that shows the data in this same list being used as part of fulfilling the program’s purpose.✅ identifies the name of the variable representing the list being used in this response. ✅ describes what the data contained in this list is representing in the program. | 1 | 1 | . Managing Complexity | ❌ includes a program code segment that shows a list being used to manage complexity in the program.❌ explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | 0 | 0 | . Procedural Abstraction | ✅ includes two program code segments: ✅ one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure.✅ one showing where the student-developed procedure is being called.✅ describes what the identified procedure does and how it contributes to the overall functionality of the program. | 1 | 1 | . Algorithm Implementation | ✅ includes a program code segment of a student-developed algorithm that includes✅ sequencing✅ selection✅ iteration✅ explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 1 | 1 | . Testing | ✅ describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute.✅ describes the condition(s) being tested by each call to the procedure.✅ identifies the result of each call. | 1 | 1 | . Reflection . There was a difference between how I graded a student’s work and how the CollegeBoard graded it. I gave the student a point for explaining the purpose and function of their program . I think that, along with their extra explanation, met the requirements for the overall goal of the program. To make sure I understand this requirement, I will clearly explain what my program does and all of its parts. I will use special words to show my knowledge about the topic. A student’s work may not meet this requirement if they don’t explain how their program works and what it gives as an output. They got a 0 out of 1 because there is no half credit. . Student 2 . Grading . Category Requirements Student Score CB Score . Program Purpose and Function | ✅ input✅ program functionality✅ output✅ describes the overall purpose of the program.✅ describes what functionality of the program is demonstrated in the video.✅ describes the input and output of the program demonstrated in the video. | 1 | 1 | . Data Abstraction | ✅ includes two program code segments:✅ one that shows how data has been stored in this list (or other collection type).✅ one that shows the data in this same list being used as part of fulfilling the program’s purpose.✅ identifies the name of the variable representing the list being used in this response. ✅ describes what the data contained in this list is representing in the program. | 1 | 1 | . Managing Complexity | ✅ includes a program code segment that shows a list being used to manage complexity in the program.✅ explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | 1 | 1 | . Procedural Abstraction | ✅ includes two program code segments: ✅ one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure.✅ one showing where the student-developed procedure is being called.✅ describes what the identified procedure does and how it contributes to the overall functionality of the program. | 1 | 1 | . Algorithm Implementation | ✅ includes a program code segment of a student-developed algorithm that includes✅ sequencing✅ selection✅ iteration✅ explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 1 | 1 | . Testing | ✅ describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute.✅ describes the condition(s) being tested by each call to the procedure.✅ identifies the result of each call. | 1 | 1 | . Reflection . I agreed with CollegeBoard’s rubric grade for this performance task submission. The student criteria required nd had the necessary code and explanations to achieve this score. In my own work, I will ensure that I create mutliple procedures with parameters to manipulate lists. Lists are a large part of the CollegeBoard APCSP requirements, so I’ll add lots of data abstraction methods using them. There is no partial credit awarded, so I will make sure to follow every single requirement exactly. The student who created this CPT did just that. . Student 3 . Grading . Category Requirements Student Score CB Score . Program Purpose and Function | ❌ describes the overall purpose of the program.❌ describes what functionality of the program is demonstrated in the video.❌ describes the input and output of the program demonstrated in the video. | 0 | 0 | . Data Abstraction | ✅ one that shows how data has been stored in this list (or other collection type).✅ one that shows the data in this same list being used as part of fulfilling the program’s purpose.✅ identifies the name of the variable representing the list being used in this response. ✅ describes what the data contained in this list is representing in the program. | 1 | 1 | . Managing Complexity | ✅ includes a program code segment that shows a list being used to manage complexity in the program.✅ explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | 1 | 1 | . Procedural Abstraction | ✅ includes two program code segments: ✅ one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure.✅ one showing where the student-developed procedure is being called.✅ describes what the identified procedure does and how it contributes to the overall functionality of the program. | 1 | 1 | . Algorithm Implementation | ✅ includes a program code segment of a student-developed algorithm that includes✅ sequencing✅ selection✅ iteration✅ explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 1 | 1 | . Testing | ✅ describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute.✅ describes the condition(s) being tested by each call to the procedure.✅ identifies the result of each call. | 1 | 1 | . Reflection . There were no major discrepancies between my scoring and CollegeBoard’s scoring of the student’s work as it was scored objectively according to the rubric. In order for my program to fulfill all the requirements, specifically for Program Purpose and Function (which this student lacked), I will ensure that I describe the overall purpose of my program in a clear and concise manner, properly describe and showcase its functionality in my video, and highlight the inputs and outputs within the program. This specific submission recieved a 0 in this category because it failed to meet these criteria—its description of the program was very barebones and did not warrant a score of 1/1. . Student 4 . Grading . Category Requirements Student Score CB Score . Program Purpose and Function | ✅ input✅ program functionality✅ output✅ describes the overall purpose of the program.✅ describes what functionality of the program is demonstrated in the video.✅ describes the input and output of the program demonstrated in the video. | 1 | 1 | . Data Abstraction | ✅ includes two program code segments:✅ one that shows how data has been stored in this list (or other collection type).✅ one that shows the data in this same list being used as part of fulfilling the program’s purpose.✅ identifies the name of the variable representing the list being used in this response. ❌ describes what the data contained in this list is representing in the program. | 0 | 0 | . Managing Complexity | ❌ includes a program code segment that shows a list being used to manage complexity in the program.✅ explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | 0 | 0 | . Procedural Abstraction | ✅ includes two program code segments: ✅ one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure.✅ one showing where the student-developed procedure is being called.✅ describes what the identified procedure does and how it contributes to the overall functionality of the program. | 1 | 1 | . Algorithm Implementation | ✅ includes a program code segment of a student-developed algorithm that includes✅ sequencing✅ selection✅ iteration✅ explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 1 | 1 | . Testing | ✅ describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute.✅ describes the condition(s) being tested by each call to the procedure.✅ identifies the result of each call. | 1 | 1 | . Reflection . I agreed with CollegeBoard’s rubric grade for the 2nd performance task submission. In order to fulfill the requirements that this submission failed to meet, I will make sure to discuss how I manage complexity in my program. In my feature for this week’s hacks, I managed complexity in many different ways and I think I can comprehensively explain it to make it clear to CollegeBoard why I deserve full points. I used many functions and data abstraction methods to make my code cleaner. This submission failed to meet this standard because it did not explicitly mention why certain procedures were implemented with the goal of reducing program complexity, something required by the CollegeBoard standards. .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/ap/2023/01/16/performance-tasks-w2.html",
            "relUrl": "/markdown/csp/ap/2023/01/16/performance-tasks-w2.html",
            "date": " • Jan 16, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "Model/OOP Hacks",
            "content": "Classwork . This is my completed classwork, satisfying all the requirements in the hacks description: . from werkzeug.security import generate_password_hash, check_password_hash import json from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) class User: def __init__(self, name, classOf, dob, uid, password): self._name = name self._uid = uid self._dob = dob self._classOf = classOf self.set_password(password) @property def name(self): return self._name @name.setter def name(self, name): self._name = name @property def uid(self): return self._uid @uid.setter def uid(self, uid): self._uid = uid @property def dob(self): return self._dob @dob.setter def dob(self, dob): self._dob = dob @property def classOf(self): return self._classOf @classOf.setter def classOf(self, classOf): self._classOf = classOf def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:8] + &quot;...&quot; def set_password(self, password): self._password = generate_password_hash(password, method=&quot;sha256&quot;) def is_password(self, password): result = check_password_hash(self._password, password) return result def toJSON(self): excluded_fields = [&quot;_password&quot;, &quot;_dob&quot;] return json.dumps( { k[1:]: v for k, v in self.__dict__.items() if k not in excluded_fields } | {&quot;age&quot;: calculate_age(self._dob)}, cls=DateTimeEncoder, ) def __str__(self): return f&#39;name: &quot;{self.name}&quot;, class of: {self.classOf}, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; def __repr__(self): return f&quot;Person(name={self._name}, classOf={self._classOf}, uid={self._uid}, password={self._password})&quot; def tester(users, uid, psw): result = None for user in users: # perform authentication if user.is_uid(uid) and user.is_password(psw): print(&quot;* &quot;, end=&quot;&quot;) result = user print(str(user)) return result class DateTimeEncoder(json.JSONEncoder): def default(self, obj): if isinstance(obj, date): return obj.isoformat() if __name__ == &quot;__main__&quot;: u1 = User( name=&quot;Thomas Edison&quot;, classOf=2024, dob=date(2022, 12, 25), uid=&quot;toby&quot;, password=&quot;123toby&quot;, ) u2 = User( name=&quot;Nicholas Tesla&quot;, classOf=2025, dob=date(2021, 1, 7), uid=&quot;nick&quot;, password=&quot;123nick&quot;, ) u3 = User( name=&quot;Alexander Graham Bell&quot;, classOf=2024, dob=date(2020, 10, 18), uid=&quot;lex&quot;, password=&quot;123lex&quot;, ) u4 = User( name=&quot;Eli Whitney&quot;, classOf=2026, dob=date(2019, 9, 16), uid=&quot;eli&quot;, password=&quot;123eli&quot;, ) u5 = User( name=&quot;Hedy Lemarr&quot;, classOf=2027, dob=date(2018, 3, 12), uid=&quot;hedy&quot;, password=&quot;123hedy&quot;, ) users = [u1, u2, u3, u4, u5] print(&quot;Test 1: find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) print(&quot; nTest 2: change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) print(&quot; nTest 3: generate JSON&quot;) json_strings = [u.toJSON() for u in users] print(&quot; n&quot;.join(json_strings)) . Test 1: find user 3 name: &#34;Thomas Edison&#34;, class of: 2024, id: &#34;toby&#34;, psw: &#34;sha256$9...&#34; name: &#34;Nicholas Tesla&#34;, class of: 2025, id: &#34;nick&#34;, psw: &#34;sha256$Y...&#34; * name: &#34;Alexander Graham Bell&#34;, class of: 2024, id: &#34;lex&#34;, psw: &#34;sha256$4...&#34; name: &#34;Eli Whitney&#34;, class of: 2026, id: &#34;eli&#34;, psw: &#34;sha256$2...&#34; name: &#34;Hedy Lemarr&#34;, class of: 2027, id: &#34;hedy&#34;, psw: &#34;sha256$y...&#34; Test 2: change user 3 name: &#34;Thomas Edison&#34;, class of: 2024, id: &#34;toby&#34;, psw: &#34;sha256$9...&#34; name: &#34;Nicholas Tesla&#34;, class of: 2025, id: &#34;nick&#34;, psw: &#34;sha256$Y...&#34; * name: &#34;John Mortensen&#34;, class of: 2024, id: &#34;jm1021&#34;, psw: &#34;sha256$N...&#34; name: &#34;Eli Whitney&#34;, class of: 2026, id: &#34;eli&#34;, psw: &#34;sha256$2...&#34; name: &#34;Hedy Lemarr&#34;, class of: 2027, id: &#34;hedy&#34;, psw: &#34;sha256$y...&#34; Test 3: generate JSON {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;classOf&#34;: 2024, &#34;age&#34;: 0} {&#34;name&#34;: &#34;Nicholas Tesla&#34;, &#34;uid&#34;: &#34;nick&#34;, &#34;classOf&#34;: 2025, &#34;age&#34;: 2} {&#34;name&#34;: &#34;John Mortensen&#34;, &#34;uid&#34;: &#34;jm1021&#34;, &#34;classOf&#34;: 2024, &#34;age&#34;: 2} {&#34;name&#34;: &#34;Eli Whitney&#34;, &#34;uid&#34;: &#34;eli&#34;, &#34;classOf&#34;: 2026, &#34;age&#34;: 3} {&#34;name&#34;: &#34;Hedy Lemarr&#34;, &#34;uid&#34;: &#34;hedy&#34;, &#34;classOf&#34;: 2027, &#34;age&#34;: 4} . Todo . The following implements a set of classes to be used with my Todo feature: https://davidvasilev1.github.io/leuck-copy/todos. It uses encapsulation and object-oriented programming to define two classes, Todo and TodoController, to manage a list of todos. It generates JSON and is ready to be connected to a frontend solution via Flask/JS Fetch. . import uuid import json class Todo: def __init__(self, text): self._text = text self._uuid = uuid.uuid4() self._completed = False @property def text(self): return self._text @text.setter def text(self, value): self._text = value @property def uuid(self): return self._uuid @property def completed(self): return self._completed @completed.setter def completed(self, value): self._completed = value class TodoController: def __init__(self): self._todos = [] @property def todos(self): return self._todos def to_json(self): todos_list = [] for todo in self._todos: todos_list.append({ &#39;text&#39;: todo.text, &#39;uuid&#39;: str(todo.uuid), &#39;completed&#39;: todo.completed }) return json.dumps(todos_list) def add_todo(self, text): todo = Todo(text) self._todos.append(todo) return todo.uuid def remove_todo(self, todo_id): self._todos = [todo for todo in self._todos if todo.uuid != todo_id] def toggle_todo(self, todo_id): for todo in self._todos: if todo.uuid == todo_id: todo.completed = not todo.completed break def test(): controller = TodoController() id = controller.add_todo(&quot;Brush my teeth&quot;) controller.toggle_todo(id) print(controller.to_json()) test() . &#39;[{&#34;text&#34;: &#34;Brush my teeth&#34;, &#34;uuid&#34;: &#34;a839a1ae-f44a-49fd-b935-a72d13b005ca&#34;, &#34;completed&#34;: true}]&#39; .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/jupyter/2023/01/10/oop-hacks.html",
            "relUrl": "/jupyter/2023/01/10/oop-hacks.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "CPT Grading W1",
            "content": "Student 1 . Grading . Category Requirements Student Score CB Score . Program Purpose and Function | ✅ input✅ program functionality✅ output✅ describes the overall purpose of the program.✅ describes what functionality of the program is demonstrated in the video.✅ describes the input and output of the program demonstrated in the video. | 1 | 0 | . Data Abstraction | ✅ includes two program code segments:✅ one that shows how data has been stored in this list (or other collection type).✅ one that shows the data in this same list being used as part of fulfilling the program’s purpose.✅ identifies the name of the variable representing the list being used in this response. ✅ describes what the data contained in this list is representing in the program. | 1 | 1 | . Managing Complexity | ❌ includes a program code segment that shows a list being used to manage complexity in the program.❌ explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | 0 | 0 | . Procedural Abstraction | ✅ includes two program code segments: ✅ one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure.✅ one showing where the student-developed procedure is being called.✅ describes what the identified procedure does and how it contributes to the overall functionality of the program. | 1 | 1 | . Algorithm Implementation | ✅ includes a program code segment of a student-developed algorithm that includes✅ sequencing✅ selection✅ iteration✅ explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 1 | 1 | . Testing | ✅ describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute.✅ describes the condition(s) being tested by each call to the procedure.✅ identifies the result of each call. | 1 | 1 | . Reflection . There was one discrepancy between my grading and CollegeBoard’s. I gave the student the point for program purpose and function because they stated that it “provided infomration on a triangle based on inputted side lengths”. I believe that this, along with their additional commentary, did satisfy the requirements for the overall purpose of the program. In order to ensure that I satisfy this requirement, I will throughly explain the purpose of my program and all of its features. I will use technical terminology to clearly convey my knowledge of the topic. A submission may fail to meet this criteria because they fail to discuss the functionality and output of their program appropriately. They were given a 0 out of 1 because there is no partial credit. . Student 2 . Grading . Category Requirements Student Score CB Score . Program Purpose and Function | ✅ input✅ program functionality✅ output✅ describes the overall purpose of the program.✅ describes what functionality of the program is demonstrated in the video.✅ describes the input and output of the program demonstrated in the video. | 1 | 1 | . Data Abstraction | ✅ includes two program code segments:✅ one that shows how data has been stored in this list (or other collection type).✅ one that shows the data in this same list being used as part of fulfilling the program’s purpose.✅ identifies the name of the variable representing the list being used in this response. ✅ describes what the data contained in this list is representing in the program. | 1 | 1 | . Managing Complexity | ✅ includes a program code segment that shows a list being used to manage complexity in the program.✅ explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | 1 | 1 | . Procedural Abstraction | ✅ includes two program code segments: ✅ one showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure.✅ one showing where the student-developed procedure is being called.✅ describes what the identified procedure does and how it contributes to the overall functionality of the program. | 1 | 1 | . Algorithm Implementation | ✅ includes a program code segment of a student-developed algorithm that includes✅ sequencing✅ selection✅ iteration✅ explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | 1 | 1 | . Testing | ✅ describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute.✅ describes the condition(s) being tested by each call to the procedure.✅ identifies the result of each call. | 1 | 1 | . Reflection . I agreed with CollegeBoard’s rubric grade for the 2nd performance task submission. The student clearly meets all criteria required for a 6/6 and had the necessary code and explanations to achieve this score. In my own work, I will ensure that I create mutliple procedures with parameters to manipulate lists. Lists are a large part of the CollegeBoard APCSP requirements, so I’ll add lots of data abstraction methods using them. There is no partial credit awarded, so I will make sure to follow every single requirement exactly. The student who created this CPT did just that. .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/ap/2023/01/09/performance-task.html",
            "relUrl": "/markdown/csp/ap/2023/01/09/performance-task.html",
            "date": " • Jan 9, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "Vocab",
            "content": "Unit 2 . Bits: 1 or 0 . Byte: collection of 8 bits . Hexadecimal: base-16 number representation . Unsigned integer: positive integer or 0 . Signed integer: any integer . Boolean: true or false . ASCII: single-byte character encoding . UTF-8: four-byte character encoding . RGB: 3-byte color representation . Lossy compression: intentionally removing redundant data; reduces quality . Losslessc compression: maintains quality but reduces size using complex algorithms . Unit 3 . Variables: store a value known at runtime . Data Types: types of values–int, bool, function ptr . Assignment operator: ‘=’ sign . Lists: sequentially ordered collection of data . 2D Lists: list of lists . Dictionaries: collection of key-value pairs . Class: template for obejcts with associated methods . Sequence: an ordering of events or code . Selection: conditional statements . Iteration: repeating certain blocks of code . Expression: a literal expression?? . Comparison operators: eq, lt, gt, le, ge . Boolean expressions: AND, OR, NOT . Truth table: table of outputs for a logic gate . String: collection of character . Concatenation: combining two strings . Upper: uppercase of string . Lower: lowercase of string . Traversing strings: looping through characters . If/Elif/Else: examples of selection performed on boolean expressions . For/While: examples of iteration perfomed on a collection of statements . Break: break out of a loop . Continue: continue to the next iteration . Procedural abstraction: creating highly specialized and modular functions . Def/Parameter/Return: parts of python function definition .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/ap/2022/12/16/vocab.html",
            "relUrl": "/markdown/csp/ap/2022/12/16/vocab.html",
            "date": " • Dec 16, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Hacks Table",
            "content": "lesson hacks grades . 3.1/3.2 | hacks | 1.0 | . 3.3/3.4 | hacks | 1.0 | . 3.5/3.7 | hacks | 1.0 | . 3.8/3.10 | hacks | 0.9 | . 3.9/3.11 | hacks | 0.97 | . 3.12/3.13 | hacks | n/a | . 3.14/3.15 | hacks | 1.0 | . 3.16 | hacks | 1.0 | . 3.17/18 | hacks | 0.96 | .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/jupyter/2022/12/16/hackstable.html",
            "relUrl": "/jupyter/2022/12/16/hackstable.html",
            "date": " • Dec 16, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Unit 3.17/3.18 Hacks",
            "content": "Hack 1 . def collatz(n): itns = 0 while n != 1: print(int(n)) if n % 2 == 0: n /= 2 else: n = n * 3 + 1 itns += 1 return itns print(&quot;iterations:&quot;, collatz(int(input(&quot;number to start from? &quot;)))) . 20 10 5 16 8 4 2 iterations: 7 . Hack 2 . def sum_range_slow(n): ret = 0 c = 0 while c &lt;= n: ret += c c += 1 return ret print(&quot;inefficient loop time: &quot;) %timeit sum_range_slow(1000000) # efficient def sum_range_fast(n): return n * (n + 1) / 2 print(&quot;efficient loop time: &quot;) %timeit sum_range_fast(1000000) # 180ms &gt;&gt;&gt; 230ns . inefficient loop time: 180 ms ± 83.7 ms per loop (mean ± std. dev. of 7 runs, 1 loop each) efficient loop time: 230 ns ± 8.54 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each) . The main difference between the two functions is that the first function uses a loop to iterate over the range of numbers from 0 to n, while the second function uses a mathematical formula to compute the sum directly. . In the first function, sum_range_slow, the loop will execute n+1 times, which means that the time it takes to execute this function will be proportional to n, the input size. This is known as having a linear time complexity. . On the other hand, the second function, sum_range_fast, uses a mathematical formula to compute the sum of the range of numbers from 0 to n in a single step, without using a loop. As a result, the time it takes to execute this function does not depend on the size of the input, n. This is known as having a constant time complexity. . In general, algorithms with a lower time complexity will be more efficient and faster than algorithms with a higher time complexity, especially when the input size is large. In this case, the second function is much more efficient than the first one because it has a constant time complexity, while the first one has a linear time complexity. . Algorithm efficiency: refers to how quickly an algorithm can solve a problem, or how much time and resources it requires to do so. .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/jupyter/2022/12/14/31718hacks.html",
            "relUrl": "/jupyter/2022/12/14/31718hacks.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Unit 3.16 Hacks",
            "content": "Hack 1 . Idea for a simulation: a platformer game that uses real physics to account for the movement of the character. Uses arrow keys for control and implements friction, gravity, and restitution forces/constants. An advantage of this simulation is that it lets us model real-life physical interactions with precision. I think a computer-generated simulation would be better in this case because it can be used for much more complex models/masses and tested multiple times. . Hack 2 . questions_number = 6 answers_correct = 0 questions = [ &quot;True or False: Simulations will always have the same result. n A: True, n B: False&quot;, &quot;True or False: A simulation has results that are more accurate than an experiment n A: True, n B: False&quot;, &quot;True or False: A simulation can model real world events that are not practical for experiments n A: True, n B: False&quot;, &quot;Which one of these is FALSE regarding simulations n A: Reduces Costs, n B: Is safer than real life experiments, n C: More Efficient, n D: More accurate than real life experiments&quot;, &quot;Which of the following scenarios would be the LEAST beneficial to have as a simulation n A: A retail company wants to identify the item which sold the most on their website, n B: A restaurant wants to determine if the use of robots will increase efficiency, n C: An insurance company wants to study the impact of rain on car accidents, n D: A sports car company wants to study design changes to their new bike design &quot;, &quot;Which of the following is better to do as a simulation than as a calculation n A: Keeping score at a basketball game, n B: Keeping track of how many games a person has won, n C: Determining the average grade for a group of tests, n D: Studying the impact of carbon emissions on the environment&quot; ] question_answers = [ &quot;B&quot;, &quot;B&quot;, &quot;A&quot;, &quot;D&quot;, &quot;A&quot;, &quot;D&quot; ] print(&quot;Welcome to the Simulations Quiz!&quot;) def ask_question (question, answer): print(&quot; n&quot;, question) user_answer = input(question) print(&quot;You said: &quot;, user_answer) if user_answer == answer: print(&quot;Correct!&quot;) global answers_correct answers_correct = answers_correct + 1 else: print(&quot;You are incorrect&quot;) for num in range(questions_number): ask_question(questions[num], question_answers[num]) print(&quot;You scored: &quot;, answers_correct, &quot;/6&quot;) . Welcome to the Simulations Quiz! True or False: Simulations will always have the same result. A: True, B: False You said: B Correct! True or False: A simulation has results that are more accurate than an experiment A: True, B: False You said: B Correct! True or False: A simulation can model real world events that are not practical for experiments A: True, B: False You said: A Correct! Which one of these is FALSE regarding simulations A: Reduces Costs, B: Is safer than real life experiments, C: More Efficient, D: More accurate than real life experiments You said: D Correct! Which of the following scenarios would be the LEAST beneficial to have as a simulation A: A retail company wants to identify the item which sold the most on their website, B: A restaurant wants to determine if the use of robots will increase efficiency, C: An insurance company wants to study the impact of rain on car accidents, D: A sports car company wants to study design changes to their new bike design You said: A Correct! Which of the following is better to do as a simulation than as a calculation A: Keeping score at a basketball game, B: Keeping track of how many games a person has won, C: Determining the average grade for a group of tests, D: Studying the impact of carbon emissions on the environment You said: D Correct! You scored: 6 /6 . Hack 3 . The rolling dice example is a simulation because the number is programatically generated and no dice is truly rolled. The builtin pseudorandom number generator uses the computer&#39;s current precise time to generate a number between 0 and 1. This number is then multiplied/shifted by a constant to account for the range. This allows the &quot;dice&quot; to be rolled multiple times. An advantage of this simulation is that many trials (millions-billions) can be simulated and analytics can be performed immediately rather than physically gathering data and then performing statistics on it. An experiment would not be better in this situation because of the aforementioned advantages that the computer simulation provides. . Hack 4 . import random trials = 100000 sides = int(input(&quot;how many sides do you want the dice to have? &quot;)) rolls = {} for _ in range(trials): roll = str(random.randint(1, sides)) if roll in rolls.keys(): rolls[roll] += 1 else: rolls[roll] = 1 for (roll, weight) in rolls.items(): print(&quot;chance of rolling&quot;, roll.rjust(len(str(sides))) + &quot;: &quot; + str(weight) + &quot;/&quot; + str(trials)) . chance of rolling 8: 6682/100000 chance of rolling 14: 6810/100000 chance of rolling 7: 6697/100000 chance of rolling 4: 6706/100000 chance of rolling 10: 6650/100000 chance of rolling 2: 6608/100000 chance of rolling 1: 6721/100000 chance of rolling 15: 6541/100000 chance of rolling 11: 6651/100000 chance of rolling 12: 6624/100000 chance of rolling 5: 6557/100000 chance of rolling 9: 6683/100000 chance of rolling 3: 6679/100000 chance of rolling 13: 6777/100000 chance of rolling 6: 6614/100000 . Extra Credit . I implemented the platformer game described in Hack #1. It is implemented in JavaScript and uses real physics to determine the position of the character. Here&#39;s the link to the code and website .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/jupyter/2022/12/13/316hacks.html",
            "relUrl": "/jupyter/2022/12/13/316hacks.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Unit 3.14/3.15 Hacks",
            "content": "3.14.1 . import math def law_of_cosines(a, b, C): C_radians = math.radians(C) cos_C = math.cos(C_radians) c = math.sqrt(a**2 + b**2 - 2 * a * b * cos_C) return c print(law_of_cosines(1, 1 / 2, 60)) print(&quot;sqrt(3)/2=&quot; + str(math.sqrt(3) / 2)) . 0.8660254037844386 sqrt(3)/2=0.8660254037844386 . The above code imports the python math module and uses the radians, cos, and sqrt functions to determine the side length of the third unknown side of a triangle given the two other sides and the angle between them. First, the angle is converted from degrees to radians using math.radians. Then, the cosine of C is calculated using math.cos. Finally, the third side is calculated using the law of cosines and the math.sqrt function. . 3.15.1 . import requests # api endpoint url = &quot;https://pquotes.p.rapidapi.com/api/quote&quot; # specify topic payload = {&quot;topic&quot;: &quot;motivation&quot;} # rapidapi headers (key, host, and body type) headers = { &quot;content-type&quot;: &quot;application/json&quot;, &quot;X-RapidAPI-Key&quot;: &quot;c4fb753596mshe0fd8cf8607e256p1eb9ebjsn7c61a5142004&quot;, &quot;X-RapidAPI-Host&quot;: &quot;pquotes.p.rapidapi.com&quot; } # send post request to API with body and headers; convert response from json to obj response = requests.post(url, json=payload, headers=headers).json() # get text and author from response text = response[&quot;quote&quot;] author = response[&quot;by&quot;] # print quote using python format string print(f&quot;Your inspirational quote of the day is: n &quot;{text} &quot; -- {author}&quot;) . Your inspirational quote of the day is: &#34;Whatever you do in life, do it with enthusiasm&#34; -- Anonymous . from flask import Flask, request import random # create flask app app = Flask(__name__) # initialize array with quotes quotes = [ &quot;GOD DID - DJ Khaled&quot;, &quot;What do I do now - Alex Kumar&quot;, &quot;You are your only limit - Kalani Cabral-Omana&quot;, &quot;You give a man food, he&#39;s given lunch for the day. If you teach a man, then you like, can eat... I forgot what it was - Navan Yatavelli&quot; ] # function for retrieving random quote def random_quote(): return random.choice(quotes) # GET endpoint on /get returns a quote @app.route(&#39;/get&#39;, methods=[&#39;GET&#39;]) def get(): return { &quot;status&quot;: &quot;success&quot;, &quot;data&quot;: { &quot;quote&quot;: random_quote() } } # POST endpoint on /post returns a message based on req body @app.route(&#39;/post&#39;, methods=[&#39;POST&#39;]) def post(): data = request.json name = data[&quot;name&quot;] return { &quot;status&quot;: &quot;success&quot;, &quot;data&quot;: { &quot;message&quot;: &quot;Hello, &quot; + name } } . import random: importing Python&#39;s builtin random library gives you access to a variety of functions that involve pseudorandom number generators with seeds such as the current precise time. Some of its most common functions include random(), random(a, b), uniform(a, b), choice(arr), shuffle(arr), sample(arr, a), and gauss(mu, sigma). . Popular Python libraries: . requests | Flask | numpy | pandas | matplotlib | seaborn | scikit-learn | tensorflow | keras | PyQt5 | opencv-python | beautifulsoup4 | pygame | lxml | sympy | Pillow | scipy | PyYAML | nltk | networkx | sqlalchemy | pyglet | paramiko | pytz | . 3.15.2 . import random isPlaying = True while isPlaying: n = random.randint(1, 8) if n in range(1, 3): print(&quot;green&quot;) elif n in range(4, 5): print(&quot;blue&quot;) elif n == 6: print(&quot;purple&quot;) elif n == 7: print(&quot;red&quot;) elif n == 8: print(&quot;orange&quot;) if input(&quot;keep playing? [y/N]&quot;) != &quot;y&quot;: isPlaying = False . green . random.randrange(12, 20) can output any number from 12 through 20, inclusive. All calls to this function will output numbers between the first parameter and second parameter, inclusive. .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/jupyter/2022/12/12/31415hacks.html",
            "relUrl": "/jupyter/2022/12/12/31415hacks.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Unit 3.9/3.11 Hacks",
            "content": "3 Components of an algorithm: Selection, Sequence, Iteration . 3.9.1 . It&#39;s important to know that similar-looking algorithms have different results because there may be small differences that greatly alter its logic. For example, the usage of a certain mathematical operator rather than another can be enough to produce a completely different return value. | pizzaPrice = 10 money = 9 if pizzaPrice &lt; money: print(&quot;great! i have more than enough money&quot;) elif pizzaPrice &gt; money: print(&quot;oh no! i don&#39;t have enough money&quot;) else: print(&quot;phew! i have just enough money&quot;) ## TO ## money = 11 hasEnough = pizzaPrice &lt; money hasNotEnough = not hasEnough if hasEnough: print(&quot;great! i have more than enough money&quot;) elif hasNotEnough: print(&quot;oh no! i don&#39;t have enough money&quot;) else: print(&quot;phew! i have just enough money&quot;) . oh no! i don&#39;t have enough money great! i have more than enough money . 3.9.2 . Algorithm: make a PB &amp; J sandwich . . If hungry, make a sandwich | Find bread. If there is, go to step 4. | If there is no bread, buy bread. Return to step 2. | Find PB &amp; J. If there is, go to step 6. | If there is no PB &amp; J, go to buy PB &amp; J. Return to step 4. | Make sandwich with PB &amp; J and bread. | Eat sandwich. No longer hungry. Return to step 1. | hungry = True bread = True pbj = False def buy_bread(): global bread bread = True print(&quot;bought bread&quot;) def buy_pbj(): global pbj pbj = True print(&quot;bought pbj&quot;) def make_sandwich(): global hungry hungry = False print(&quot;yum&quot;) while hungry: if bread: if pbj: make_sandwich() else: buy_pbj() else: buy_bread() . bought pbj yum . 3.9.3 . Number guesser flowchart: . import random #sets variables for the game num_guesses = 0 user_guess = 0 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(1,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 1 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): num = input(&quot;Guess a number! &quot;) return int(num) #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if guess &lt; number: print(&quot;Nice try! too low&quot;) #change this lower_bound = guess elif guess &gt; number: print(&quot;Nice try! too high&quot;) #change this upper_bound = guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . 3.11 . [12, 14, 43, 57, 79, 80, 99] . Middle: 57 | Second number: 80 | Tree: | . [92, 43, 74, 66, 30, 12, 1] . Middle: 66 | Second number: 74 | Tree: | . [7, 13, 96, 111, 33, 84, 60] . Middle: 60 | Second number: 96 | Tree: | . MC #3: C (not sorted) . import math def binary_search1(xs, x, start, end): if start &gt; end: return -1 mid = math.floor((start + end) / 2) if xs[mid] == x: print(&quot;x =&quot;, x) return mid if xs[mid] &gt; x: print(&quot;x &lt;&quot;, xs[mid]) return binary_search1(xs, x, start, mid-1) if xs[mid] &lt; x: print(&quot;x &gt;&quot;, xs[mid]) return binary_search1(xs, x, mid+1, end) def binary_search(xs, x): return binary_search1(xs, x, 0, len(xs) - 1) arr1 = [12, 14, 43, 57, 79, 80, 99] arr2 = [92, 43, 74, 66, 30, 12, 1] arr3 = [7, 13, 96, 111, 33, 84, 60] arr2.sort() arr3.sort() for (arr, needle) in zip([arr1, arr2, arr3], [14, 12, 84]): print(&quot;constructing binary search tree:&quot;, arr, &quot;searching for&quot;, needle) print(&quot;found {} at idx {} n&quot;.format(needle, binary_search(arr, needle))) . constructing binary search tree: [12, 14, 43, 57, 79, 80, 99] searching for 14 x &lt; 57 x = 14 found 14 at idx 1 constructing binary search tree: [1, 12, 30, 43, 66, 74, 92] searching for 12 x &lt; 43 x = 12 found 12 at idx 1 constructing binary search tree: [7, 13, 33, 60, 84, 96, 111] searching for 84 x &gt; 60 x &lt; 96 x = 84 found 84 at idx 4 .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/jupyter/2022/12/06/39-311hacks.html",
            "relUrl": "/jupyter/2022/12/06/39-311hacks.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Unit 3.8/3.10 Hacks",
            "content": "3.8.1 . Iteration: the repetition of a specific block of code Example of iteration: . I am hungry | Make food | Eat food | If not hungry, break | Repeat -&gt; 1 | def make_food(): pass while True: make_food() if input(&quot;still hungry? &quot;) == &quot;n&quot;: break . 3.8.2 . Iteration statement: a statement that causes a specific block to repeat until a condition is met (ex. for, while) . for i in range(10, 0, -1): print(i) . 10 9 8 7 6 5 4 3 2 1 . xs = [3, 16, 29, 42, 55, 68, 81] idx = 0 while idx &lt; len(xs): print(xs[idx]) idx += 1 . 3 16 29 42 55 68 81 . 3.10 . nums = [38, 45, 67, 83, 78] m = nums[0] for n in nums: if n &lt; m: m = n print(m) . 38 . Lists quiz . .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/jupyter/2022/12/05/38-310-hacks.html",
            "relUrl": "/jupyter/2022/12/05/38-310-hacks.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Algorithm Hacks",
            "content": "Truth Table . const table = [ [0, 0], [0, 1], [1, 0], [1, 1] ]; const singleColumnTable = [0, 1]; const binaryOps = { &quot;AND&quot;: (a, b) =&gt; a &amp; b, &quot;OR&quot;: (a, b) =&gt; a | b, &quot;XOR&quot;: (a, b) =&gt; a ^ b, } const unaryOps = { &quot;NOT&quot;: (a) =&gt; +!a } let s = &quot;&quot; for (const [op, fn] of Object.entries(binaryOps)) { s += `&lt;h1&gt;${op}&lt;/h1&gt; n` for (const [a, b] of table) { s += `&lt;p&gt;${a} ${op} ${b} = ${fn(a, b)}&lt;/p&gt; n` } } for (const [op, fn] of Object.entries(unaryOps)) { s += `&lt;h1&gt;${op}&lt;/h1&gt; n` for (const a of singleColumnTable) { s += `&lt;p&gt;${op} ${a} = ${fn(a)}&lt;/p&gt; n` } } document.getElementById(&quot;table&quot;).innerHTML = s; . . Binary to Hex/Decimal . const binaryString = &quot;11101011101&quot;; const hexValue = (bin) =&gt; parseInt(bin, 2).toString(16); const decValue = (bin) =&gt; parseInt(bin, 2).toString(10); console.log(hexValue(binaryString)); console.log(decValue(binaryString)); . 75d 1885 . binaryString = &quot;11101011101&quot; def hexValue(bin): return hex(int(bin, 2)) def decValue(bin): return str(int(bin, 2)) print(hexValue(binaryString)) print(decValue(binaryString)) . 0x75d 1885 . Fibonacci . const fib = (n) =&gt; { if (n === 0 || n === 1) return n return fib(n - 1) + fib(n - 2) } for (let i = 0; i&lt; 10; i++) { console.log(fib(i)) } . 0 1 1 2 3 5 8 13 21 34 . def fib(n): if n == 0 or n == 1: return n return fib(n - 1) + fib(n - 2) for i in range(10): print(fib(i)) . 0 1 1 2 3 5 8 13 21 34 . Palindrome . const revString = (str) =&gt; str.split(&quot;&quot;).reverse().join(&quot;&quot;) const isPalindrome = (str) =&gt; str === revString(str.split(&quot;&quot;).reverse().join(&quot;&quot;)); const createPalindrome = (str) =&gt; str + revString(str) console.log(revString(&quot;abcd&quot;)) console.log(isPalindrome(&quot;abba&quot;)) console.log(createPalindrome(&quot;abcdef&quot;)) . dcba true abcdeffedcba . def rev_string(str): return str[::-1] def is_palindrome(str): return rev_string(str) == str def create_palindrome(str): return str + rev_string(str) print(rev_string(&quot;abcd&quot;)) print(is_palindrome(&quot;abba&quot;)) print(create_palindrome(&quot;abcdef&quot;)) . dcba True abcdeffedcba . Other (extra) . const binarySearch1 = (xs, x, start, end) =&gt; { if (start &gt; end) return -1; const mid = Math.floor((start+end) / 2); if (xs[mid] === x) return mid; if (xs[mid] &gt; x) return binarySearch1(xs, x, start, mid-1); if (xs[mid] &lt; x) return binarySearch1(xs, x, mid+1, end); } const binarySearch = (xs, x) =&gt; binarySearch1(xs, x, 0, xs.length - 1) const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] const needle = 4 console.log(`found ${needle} at idx ${binarySearch(arr, needle)}`) . found 4 at idx 3 . import math def binary_search1(xs, x, start, end): if start &gt; end: return -1 mid = math.floor((start + end) / 2) if xs[mid] == x: return mid if xs[mid] &gt; x: return binary_search1(xs, x, start, mid-1) if xs[mid] &lt; x: return binary_search1(xs, x, mid+1, end) def binary_search(xs, x): return binary_search1(xs, x, 0, len(xs) - 1) arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] needle = 4 print(&quot;found {} at idx {}&quot;.format(needle, binary_search(arr, needle))) . found 4 at idx 3 .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/jupyter/2022/12/01/algorithm-hacks.html",
            "relUrl": "/jupyter/2022/12/01/algorithm-hacks.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Unit 3.5/3.7 Hacks",
            "content": "3.5 . NOT: if true, return false (and vice versa) . OR: if either boolean is true, return true; else return false . AND: if both booleans are true, return true; else return false . activities = { &quot;tennis&quot;: True, &quot;football&quot;: False } # NOT def is_not_playing(sport): return not activities[sport] # OR def is_playing_sport(): return activities[&quot;tennis&quot;] or activities[&quot;football&quot;] # AND def has_no_time_for_homework(): return activities[&quot;tennis&quot;] and activities[&quot;football&quot;] # MAIN LOGIC if is_not_playing(&quot;football&quot;): print(&quot;you should play football!&quot;) if is_playing_sport(): print(&quot;great job, sports are good!&quot;) if has_no_time_for_homework(): print(&quot;wow, you&#39;re busy!&quot;) . you should play football! great job, spots are good! . 3.6 . Selection: only run some lines of code if a certain condition is true. One example of this is an if-then statement. Algorithm: a procedure of code that does something or a task. One example is a Python function that adds a certain constant to the integer provided as input and returns the new number. Conditional statement: statement that affects whether a chunk of code will be executed or not. One example is an if-then statement. . global lights lights = 0b00000000 # light: light number from the left def light_place(light): return pow(2, 8-light) def print_lights(): print(&#39;{:08b}&#39;.format(lights)) def light_toggle(light): global lights # xor flips lights ^= light_place(light) def light_on(light): global lights # or always turns on lights |= light_place(light) def light_off(light): global lights # anding with mask (uses not) turns off lights &amp;= ~light_place(light) ## conditionals ## def is_light_on(light): global lights return lights &amp; light_place(light) == lights def is_light_off(light): global lights return not is_light_on(light) print_lights() light_toggle(2) print_lights() light_on(7) print_lights() light_off(2) print_lights() print(is_light_on(7)) print(is_light_on(2)) . 00000000 01000000 01000010 00000010 True False . 3.7 . forehand = 90 backhand = 50 serve = 75 name = input(&quot;what&#39;s ur name? &quot;) makes_team = True if forehand &lt; 70: if backhand &gt; 80: if serve &lt; 85: makes_team = False else: makes_team = False else: if backhand &lt; 85: makes_team = False elif serve &lt; 70: makes_team = False if makes_team: print(&quot;congrats&quot;, name, &quot;you made it!&quot;) else: print(&quot;that&#39;s tough&quot;, name, &quot;you didn&#39;t make it!&quot;) . that&#39;s tough safin you didn&#39;t make it! . . motivation = 10 teacher = &quot;Mortensen&quot; code_quality = 90 give_up = False if teacher == &quot;Mortensen&quot;: give_up = True else: if motivation &gt; 60: give_up = False else: if code_quality &lt; 80: give_up = True if give_up: print(&quot;give up it&#39;s not worth it&quot;) . give up it&#39;s not worth it . . number = 2 guess = int(input(&quot;guess my number! &quot;)) if guess &lt; number: print(&quot;too low&quot;) else: if guess == number: print(&quot;just right&quot;) else: print(&quot;wayy too big&quot;) . . phone = &quot;iphone&quot; laptop = &quot;macbook&quot; headphones = &quot;airpods&quot; if phone == &quot;iphone&quot;: print(&quot;nice iphone&quot;) if laptop == &quot;macbook&quot;: print(&quot;nice macbook&quot;) if headphones == &quot;airpods&quot;: print(&quot;nice airpods&quot;) print(&quot;you have 3 apple devices&quot;) else: print(&quot;you only have 2 apple devices&quot;) else: if headphones == &quot;airpods&quot;: print(&quot;nice airpods&quot;) print(&quot;you have 2 apple devices&quot;) else: print(&quot;you only have 1 apple device&quot;) else: print(&quot;you should get an iphone&quot;) . nice iphone nice macbook nice airpods you have 3 apple devices . Class reccomendations . print(&quot;answer: y/n&quot;) calculus = input(&quot;Do you like calculus?&quot;) writing = input(&quot;Do you like writing?&quot;) physics = input(&quot;Do you like physics?&quot;) CS = input(&quot;Do you like CS?&quot;) print(&quot;calculus?:&quot;, calculus) print(&quot;writing?:&quot;, writing) print(&quot;physics?:&quot;, physics) print(&quot;CS?:&quot;, CS) if calculus == &quot;y&quot;: print(&quot;Take calculus 101&quot;) if writing == &quot;y&quot;: print(&quot;Take writing 101&quot;) if physics == &quot;y&quot;: print(&quot;Take physics 101&quot;) if CS == &quot;y&quot;: print(&quot;Take CS 101&quot;) elif writing == &quot;y&quot;: print(&quot;Take writing 101&quot;) if physics == &quot;y&quot;: print(&quot;Take physics 101&quot;) if CS == &quot;y&quot;: print(&quot;Take CS 101&quot;) elif physics == &quot;y&quot;: print(&quot;Take physics 101&quot;) if CS == &quot;y&quot;: print(&quot;Take CS 101&quot;) else: print(&quot;Take CS 101&quot;) . answer: y/n calculus?: n writing?: y physics?: n CS?: y Take writing 101 Take CS 101 .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/jupyter/2022/12/01/35-37-hacks.html",
            "relUrl": "/jupyter/2022/12/01/35-37-hacks.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Unit 3.3/3.4 Hacks",
            "content": "3.3.1 . Sequencing: 1, 2, 3, 4, 5 . All events in the list are part of a sequence. All events must occur in the specified order . Selection:3 . This step evaluates an expression to a boolean and determines the following code path based on its result . Iteration:4 . Causes code to loop until a certain condition is met . num1 = 5 # num1 = 5 num2 = num1 * 3 # num2 = 15 num3 = num2 / num1 * (9 % 2) * 4 # num3 = 15 / 5 * (9 % 2) * 4 # num3 = 15 / 5 * 1 * 4 # num3 = 12 result = (num3 % num1 + num2) % num3 * 3 / 5 # result = (12 % 5 + 15) % 12 * 3 / 5 # result = (2 + 15) % 12 * 3 / 5 # result = 5 * 3 / 5 # result = 3 # check print(result) . 3.0 . 3.3 Crossword Puzzle . 1, down: ITERATION . 2, down: SELECTION . 3, across: SEQUENCE . 3.4 Quiz .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/jupyter/2022/12/01/33-34-hacks.html",
            "relUrl": "/jupyter/2022/12/01/33-34-hacks.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Unit 3.1/3.2 Hacks",
            "content": "3.1.1 . name = &quot;alex&quot; age = 16 traits = { &quot;stupid&quot;: True } print(name, age, traits) . alex 16 {&#39;stupid&#39;: True} . 3.1.2 . Assignment operator: assigns a value to a variable Collegeboard pseudocode assigment operator: &lt;- X value: if the value of the x variable is changed, the print builtin would display the new value of x Multiple ways to define a variable in JS: . // works but dont do this, pollutes global scope a = 1 var a = 1 // reccomended let a = 1 // prevents reassignment const a = 1 . 3.2.1 . List: a collection of data values stored sequentially Element: a single data value within a list Reference elements in a list/string: using an index like so--data[0] Example of a string: &quot;hello world!&quot; . foods = [&quot;ramen&quot;, &quot;pasta&quot;, &quot;sushi&quot;, &quot;donuts&quot;] # index 3 print(foods[3]) # position 3 print(foods[2]) # negative index (last position) print(foods[-1]) . donuts sushi donuts . 3.2.2 . num1=input(&quot;Input a number. &quot;) num2=input(&quot;Input a number. &quot;) num3=input(&quot;Input a number. &quot;) add=input(&quot;How much would you like to add? &quot;) # Add code in the space below numlist = [int(n) for n in [num1, num2, num3]] print(&quot;Original numbers:&quot;,numlist) print(&quot;Adding:&quot;,add) # The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. for i in range(len(numlist)): numlist[i-1] += int(add) print(&quot;New numbers:&quot;,numlist) . Original numbers: [100, 200, 300] Adding: 25 New numbers: [125, 225, 325] . 3.2.3 . Python quiz: Simplify list: . Why are lists better for code? They are more concise and allow you to change entries in a specific location rather than changing individual lines by hand. Long way: . one = 1 two = 2 three = 3 four = 4 print(one + two) print(two + three) print(three + four) . Short way: . nums = [1, 2, 3, 4] for i in range(len(nums)-1): print(nums[i]+nums[i+1]) .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/jupyter/2022/12/01/31-32-hacks.html",
            "relUrl": "/jupyter/2022/12/01/31-32-hacks.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Tools Check",
            "content": "Jupyter Notebooks . Executing Jupyter cells in VSCode: . Python | JavaScript | . Rendering content properly on deployed site: . Python: Inspirational Quotes API | JavaScript: JS Kernel Usage | . Anaconda . Anaconda-based Python interpreter set up and running in VSCode . . Docker . Running make server command on host: . .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/ap/2022/11/18/tools-check.html",
            "relUrl": "/markdown/csp/ap/2022/11/18/tools-check.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Binary Math",
            "content": "See /binhacks .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Final Test",
            "content": "I got a 49/50 on my final: . . I got this question wrong: . . In order to interchange the values at indexes j and k respectively, the procedure works as follows: . Create a duplicate list of the list provided in the function parameters | Set the element at index i of the new list to the element at index j in the old list and vice versa | Return the new list | Therefore, answers C and D are incorrect. We’re left with deciding between range(s) for j and k in answer choices A and B: . The value of j must be between 0 and the value of k, inclusive OR The values of j and k must both be between 1 and LENGTH(numList), inclusive. . It is known that j and k must be valid list indices of the list provided in the parameter. It is assumed that the list accesses are accessing by position rather than index because LEN(numList) is an invalid index. Therefore, B is possibly correct. There is no explicit boundary set for j such that it must be less than k. j and k should be interchangable because they are being used to swap two elements in a list (swap(a, b) should be equivalent to swap(b, a)). . Therefore, the correct answer must be answer choice B. .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/ap/2022/11/07/final-week.html",
            "relUrl": "/markdown/csp/ap/2022/11/07/final-week.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "CTE Standards",
            "content": "What standards have we hit so far? Which assignment do they relate to? . We’ve hit a majority of the CTE standards thus far. Some of the main ones that we covered this week in our Computer Systems and Networks were #7 and #9, which are: . Develop Web and online projects. | Develop software for a variety of devices, including robotics. | For #7, we’re developing a frontend for our project. Other users can access this frontend in their browser. The browser makes an HTTP GET request to a remote server which returns HTML. This HTML is then parsed and displayed in the client’s browser, showing them the webpage. The way that our frontend works is that fastpages statically generates a site with HTML, CSS, and JS. Then, it’s served by GitHub Pages at our team’s URL. . As for #9, we’re not only developing software for the client browser, but also the server. We’ve created a Flask-based web server hosting an API that the frontend will access. It’s written in Python and run in a Docker container on AWS. The server accepts both GET and POST requests from a client and returns/accepts data in the JSON format. . What standards are you looking forward to learning more about? . I’m looking forward to implementing standard #8, which is the use of databases. Databases are used for persistent data storage and are more effective than the in-memory solution that our backend currently uses. . What other careers can you benefit from being in this pathway? . This pathway helps me develop the skills needed for a career in software development. In a production setting, I would need to know the ins and outs of both implementing and using a database tool to manage user data and other information. .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/ap/2022/10/23/cte-standards.html",
            "relUrl": "/markdown/csp/ap/2022/10/23/cte-standards.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Big Idea 4",
            "content": "Internet Quiz . . DevOps . We are using Docker to containerize our project. We’re running the Docker container using docker-compose on a AWS. Here’s what I’ve learned through CollegeBoard: . HTTP/HTTPS is a protocol used to transfer web documents. Its underlying protocol is TCP. | DNS is a protocol that manages domain resolution. | IP Addresses describe a unique location on the internet | .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/ap/2022/10/16/big-idea-4.html",
            "relUrl": "/markdown/csp/ap/2022/10/16/big-idea-4.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Identifying and Correcting Errors",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: # CHANGED: i + 1 print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i + 1) + &quot; letter in the alphabet&quot;) # ADDED: break break i += 1 . The letter d is the 3 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) # MOVED: count initializer outside loop count = 0 for i in alphabetList: if i == letter: # CHANGED: i + 1 print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count + 1) + &quot; letter in the alphabet&quot;) # ADDED: break break count += 1 . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] # CHANGED: i = 0 to i = 1 i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: # CHANGED == 0 to == 1 if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 # CHANGED: &lt; to &lt;= while i &lt;= 100: numbers.append(i) i += 1 for i in numbers: # MOVED % 2 == 0 to same if statement if numbers[i] % 5 == 0 or numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): # CHANGED: &#39; &#39; to &#39; t&#39; print(k + &quot; t$&quot; + str(v)) #ideally the code should prompt the user multiple times items = input(&quot;Please select item(s) from the menu (comma-separated): &quot;) items_standarized = [item.strip() for item in items.split(&quot;,&quot;)] for item in items_standarized: if item not in menu.keys(): print(f&quot;Error: unrecognized menu item: {item}&quot;) exit() total += menu[item] print(&quot;Your total is: $&quot; + str(round(total, 2))) . Menu burger $3.99 fries $1.99 drink $0.99 Your total is: $10.96 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/1.b/4.c/c3.0/c5.0/c5.1/c5.2/c5.3/c5.4/c5.5/c5.6/2022/10/12/ap-error-fixes.html",
            "relUrl": "/1.b/4.c/c3.0/c5.0/c5.1/c5.2/c5.3/c5.4/c5.5/c5.6/2022/10/12/ap-error-fixes.html",
            "date": " • Oct 12, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Project Plan",
            "content": "Project Plan . We were initially planning to create a website that allowed users to post inspirational quotes and like their friends’ posts. However, we wanted to incorporate a random quotes API into our project and decided to change it. The design we came up with after hours of tireless work is shown below. . Design Work . After hoco, we all came to my crib and drew this up on an iPad. Then, we transferred it to a Google Drawing as shown. The adjusted plan includes random quotes that people can like rather than posting their own. . Creation . . As you can see, the design shows inspiration quotes from prevalent speakers such as DJ Khaled and Martin Luther King Jr. This satisfies the Collegeboard criteria as follows: . Program Purpose &amp; Function . A website to display random inspirational quotes | Users can create accounts and save quotes by liking themm | . Data Abstraction . The only state being stored in this application is user and like data | Data will be stored in a relational database (SQLite, for example) | Data will be accessed using the sqlite3 library, a Python interface for SQLite | . Managing Complexity . Usage of the reccomended Flask folder structure for application (separate module with __init__ file) Boostrapped at: https://github.com/safinsingh/striver | Separate views folder | . | Python dependency/env management using PyEnv (Pipfile-based package locking) | . Procedural Abstraction . Separate functions and HTML templates for different views | Quote API abstraction using a function to access the RapidAPI repeatedly Potential issue: server using the same key for all requests could cause rate limiting errors | . | . Algorithm Implementation . Following/followers DB setup: | . Following SQL table: - User ID (foreign key to users table) - Follower ID (foreign key to users table) - Unique/primary key as (userid, followerid) . Testing . Use of print statements to debug API issues | Use of pytest built-in Flask testing framework to ensure HTML pages are rendered correctly | .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/ap/2022/10/09/project-plan.html",
            "relUrl": "/markdown/csp/ap/2022/10/09/project-plan.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Collegeboard Quizzes 2",
            "content": "Quizzes . Here are my scores from the Collegeboard quizzes we took this week: . . I learned a lot about how the internet works and how to correctly identify and fix common programming errors. I didn’t have much trouble with this week’s quizzes. .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/ap/2022/10/09/collegeboard-quizzes-2.html",
            "relUrl": "/markdown/csp/ap/2022/10/09/collegeboard-quizzes-2.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Inspirational Quotes API",
            "content": "Consuming an API . The following sends a POST request to the PQuotes API. . import requests # api endpoint url = &quot;https://pquotes.p.rapidapi.com/api/quote&quot; # specify topic payload = {&quot;topic&quot;: &quot;motivation&quot;} # rapidapi headers (key, host, and body type) headers = { &quot;content-type&quot;: &quot;application/json&quot;, &quot;X-RapidAPI-Key&quot;: &quot;c4fb753596mshe0fd8cf8607e256p1eb9ebjsn7c61a5142004&quot;, &quot;X-RapidAPI-Host&quot;: &quot;pquotes.p.rapidapi.com&quot; } # send post request to API with body and headers; convert response from json to obj response = requests.post(url, json=payload, headers=headers).json() # get text and author from response text = response[&quot;quote&quot;] author = response[&quot;by&quot;] # print quote using python format string print(f&quot;Your inspirational quote of the day is: n &quot;{text} &quot; -- {author}&quot;) . Your inspirational quote of the day is: &#34;Believe you can and you’re halfway there.&#34; -- Theodore Roosevelt . Creating an API with Flask . from flask import Flask, request import random # create flask app app = Flask(__name__) # initialize array with quotes quotes = [ &quot;GOD DID - DJ Khaled&quot;, &quot;What do I do now - Alex Kumar&quot;, &quot;You are your only limit - Kalani Cabral-Omana&quot;, &quot;You give a man food, he&#39;s given lunch for the day. If you teach a man, then you like, can eat... I forgot what it was - Navan Yatavelli&quot; ] # function for retrieving random quote def random_quote(): return random.choice(quotes) # GET endpoint on /get returns a quote @app.route(&#39;/get&#39;, methods=[&#39;GET&#39;]) def get(): return { &quot;status&quot;: &quot;success&quot;, &quot;data&quot;: { &quot;quote&quot;: random_quote() } } # POST endpoint on /post returns a message based on req body @app.route(&#39;/post&#39;, methods=[&#39;POST&#39;]) def post(): data = request.json name = data[&quot;name&quot;] return { &quot;status&quot;: &quot;success&quot;, &quot;data&quot;: { &quot;message&quot;: &quot;Hello, &quot; + name } } .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/inspirational-api",
            "relUrl": "/inspirational-api",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Collegeboard Quizzes",
            "content": "Quizzes . Here are my scores from the Collegeboard quizzes we took this week: . . I think I learned a lot about programming concepts and collegeboard’s pseudocode syntax. I didn’t have much trouble with the questions but one thing I could improve on is my accuracy because I wasn’t patient when answering. .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/ap/2022/10/01/collegeboard-quizzes.html",
            "relUrl": "/markdown/csp/ap/2022/10/01/collegeboard-quizzes.html",
            "date": " • Oct 1, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "AWS Deployment",
            "content": "Docker . We set up 4 different containers to run each of our sites on. Within the container, each site was bound to port 8080 with gunicorn. It was then mapped to a unique port on the AWS instance. . . cURL . We used cURL to test if our Flask server running inside the container was working: . . NGINX . We used NGINX to proxy requests to the AWS instance and serve the Flask site. We created 4 different server {} blocks for each of our sites, each bound to port 80 and serving content on different subdomains. . . We used Freenom to acquire a domain and Certbot to generate SSL certificates in order to serve our websites over HTTPS. . The following links work properly (including subdomains): . https://striver.tk/ | https://safin.striver.tk/ | https://alex.striver.tk/ | https://kalani.striver.tk/ | https://navan.striver.tk/ | .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/ap/2022/10/01/aws-deployment.html",
            "relUrl": "/markdown/csp/ap/2022/10/01/aws-deployment.html",
            "date": " • Oct 1, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "SCRUM Project Idea",
            "content": "Program purpose . We are creating a website called Striver that can keep track of your personal goals and share them with your peers. You will be able to like each other’s goals and see a feed of goals that you and your friends have. . Design . My team and I collaborated on a Google Drawing to mock up what our website will look like. We will use Bootstrap to design the components and Flask to template different pages. The like button will be an image that will switch to a different color once activated. . . SCRUM team role . My team and I decided on the following roles: . Safin: SCRUM Master | Kalani: Frontend | Alex: Backend | Navan: DevOps | . As SCRUM master, I will make sure my team is always on task and meetings the deadlines set by Mr. M. I will oversee general development and help out on all aspects of our project where needed. We intend to use HTML/CSS/JS for our frontend and Python on the backend. The DevOps pipeline will be powered by GitHub Actions + some hosting provider (presumably AWS) and managed by Alex. . SCRUM poster . . Here is a poster that my team and I created together to describe each role of a SCRUM team in detail! .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/ap/2022/09/25/scrum-project-idea.html",
            "relUrl": "/markdown/csp/ap/2022/09/25/scrum-project-idea.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "JS Kernel Usage",
            "content": "Usage of the JS Kernel . Just the code snippets I created in this post adjusted to produce console output/show additional function/class usage . $$async$$ = true; // github graphql query const query = `query { repositoryOwner(login: &quot;safinsingh&quot;) { ... on ProfileOwner { itemShowcase { items(first: 4) { edges { node { ... on Repository { name description url } } } } } } } }`; // github api token base64 encoded const token = decodeURIComponent( atob(&quot;Z2hwX3V1YmN4UzNJZ3kwc1JqTkZFdWllZTZMQ2JFeXcwbzBlR1Njdw==&quot;) ); const main = async () =&gt; { // get projects as array const projects = await fetch(&quot;https://api.github.com/graphql&quot;, { // send query as request body body: JSON.stringify({ query }), headers: { Accept: &quot;application/json&quot;, // use token for authorization Authorization: `Bearer ${token}`, &quot;Content-Type&quot;: &quot;application/json&quot;, }, method: &quot;POST&quot;, }) .then((r) =&gt; r.json()) .then((r) =&gt; r.data.repositoryOwner.itemShowcase.items.edges.map( (edge) =&gt; edge.node ) ); const rowFrags = projects.map( (p) =&gt; ` &lt;tr&gt; &lt;td&gt;${p.name}&lt;/td&gt; &lt;td&gt;${p.description}&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;${p.url}&quot;&gt;${p.url}&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; ` ); const tableFrag = ` &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;th&gt;URL&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; ${rowFrags.join(&quot; n&quot;)} &lt;/tbody&gt; &lt;/table&gt; `; $$.html(tableFrag); }; main() .then(() =&gt; $$done$$(&quot;finished&quot;)) .catch((e) =&gt; $$done$$(&quot;err: &quot; + e)); . (node:10986) ExperimentalWarning: The Fetch API is an experimental feature. This feature could change at any time (Use `node --trace-warnings ...` to show where the warning was created) . Name Description URL . hermes | ✨ A full-stack ephemeral chat application built with Node.js | https://github.com/safinsingh/hermes | . scylla | ⚔️A high-performance CyberPatriot-style RvB engine | https://github.com/safinsingh/scylla | . fso | 🔗 Fast [link] shortener | https://github.com/safinsingh/fso | . pam-remote2 | 👨‍💻Intercept and upload PAM authentication credentials | https://github.com/safinsingh/pam-remote2 | .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/jupyter/javascript/2022/09/25/js-kernel-usage.html",
            "relUrl": "/jupyter/javascript/2022/09/25/js-kernel-usage.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "JavaScript and CSS customization",
            "content": "Here’s the source for my “Top 4 Projects” section: . // github graphql query const query = `query { repositoryOwner(login: &quot;safinsingh&quot;) { ... on ProfileOwner { itemShowcase { items(first: 4) { edges { node { ... on Repository { name description url } } } } } } } }`; // github token stored as base64 so they dont email me and cancel my token const token = decodeURIComponent(atob(&quot;...&quot;)); // select projects div by id const projectsBox = document.getElementById(&quot;projects&quot;); // send post req to github graphql api fetch(&quot;https://api.github.com/graphql&quot;, { // send query as request body body: JSON.stringify({ query }), headers: { Accept: &quot;application/json&quot;, // use token for authorization Authorization: `Bearer ${token}`, &quot;Content-Type&quot;: &quot;application/json&quot;, }, method: &quot;POST&quot;, }) .then((r) =&gt; r.json()) .then((r) =&gt; { const p = r.data.repositoryOwner.itemShowcase.items.edges.map((edge) =&gt; edge.node); // add projects to table p.forEach((proj) =&gt; { const info = document.createElement(&quot;div&quot;); info.innerHTML = ` &lt;h3&gt;&lt;a href=&quot;${proj.url}&quot;&gt;${proj.name}&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;${proj.description}&lt;/p&gt; `; projectsBox.appendChild(info); }); }); . Here’s the styling I added: . // 2x2 responsive grid for projects div #projects { display: grid; grid-template-columns: repeat(auto-fill, minmax(350px, 1fr)); gap: 1rem; h3 { display: inline-block; } h3, p { margin: 0.5rem 1rem !important; padding: 0px !important; } div { border: 1px solid #e6e6e6; border-radius: 4px; padding: 1rem; min-height: 100px; display: flex; flex-direction: column; justify-content: center; // hover shadow &amp;:hover { border: 1px solid #dfdfdf; box-shadow: 0px 2.4px 2.5px rgba(0, 0, 0, 0.009), 0px 6px 6.3px rgba(0, 0, 0, 0.013), 0px 12.2px 12.8px rgba(0, 0, 0, 0.017), 0px 25.2px 26.3px rgba(0, 0, 0, 0.021), 0px 69px 72px rgba(0, 0, 0, 0.03); } } } ] . and the corresponding HTML: . &lt;h1&gt;Hi, I&#39;m Safin Welcome to my blog!&lt;/h1&gt; &lt;p&gt; Here&#39;s my &lt;a href=&quot;https://safin.dev&quot; target=&quot;_blank&quot;&gt;actual website&lt;/a&gt; and &lt;a href=&quot;https://www.linkedin.com/in/safinsingh/&quot;&gt;LinkedIn page&lt;/a&gt;. Go check out my posts below! &lt;/p&gt; &lt;h2&gt;Top 4 GitHub Projects&lt;/h2&gt; &lt;div id=&quot;projects&quot;&gt;&lt;/div&gt; &lt;a href=&quot;/fastpages-apcsp/js-explanation&quot;&gt;Source code →&lt;/a&gt; .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/js-explanation",
            "relUrl": "/js-explanation",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Points",
            "content": "update: W, +0.6 pts overall for everyone . Name Peer Grade Teacher Grade Peer Feedback Teacher Feedback . Alex | 3.0 | 2.8 | Really great work Alex. Your fastpages and python simultaneous servers ran perfectly and you showed live changes on both of them. You went above and beyond by creating a survey based on the video we watched and analyzed data about students’ anxiety in school. The usage of the Google Sheets iframe was a really cool way to showcase our learning on our Python site, and your blog covers additional statistics that we gathered. The longer video was also really helpful for me to get a full understanding of your weekly progress. This is 3.0/3.0 material! | good tansitions and easy to follow on changes. | . Safin | 3.0 | 2.8 | This was very good safin! I really like the concision on your video and how you included the google form. I think that it was very cool that you went above and beyond to add an API to the collaborative repository. I also really liked the form idea because it helps apply the knowledge from the video to our own school. I also really liked the way that you analyzed the data because it really shows me how prevalent this problem is in our own school. | covered key concepts like survey extra. suggest moving mouse less | . Kalani | 2.7+ | 2.6 | I liked the notes that you wrote about the mental health awareness. Your video is also very clean and straight forward, however I found some errors that you made when talking which is why I did not give you 100%. The Survey that you linked and the information needed to read it was also very unique and interesting. | Incorrect word or activity associated with docker at beginning. Not sure you talked about GitHub. | . Navan | 2.7+ | 2.7 | I think that you deserve a 2.7+ because you did a very nice job with the notes on each video as well as the collaboration notes and an extra survey based on the psychology of a good life. | Nice ideas for change. Realization of changes not real clear in video. Seems like you hit on key items. | .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/ap/2022/09/23/talking-up-the-homies.html",
            "relUrl": "/markdown/csp/ap/2022/09/23/talking-up-the-homies.html",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Create Performance Task",
            "content": "Idea . I want to create a website that leverage’s Spotify’s API to show your Spotify listening statistics from the last 6 months, similar to Spotify’s “Wrapped” feature. It will show top tracks, artists, and genres on a website display that uses Spotify’s OAuth2 authentication feature. The project will be built using SvelteKit and Spotify’s JavaScript web API client. . Technical Requirements . Node.js | Hosting platform (Vercel) | Client-side JavaScript | . Design . . Code structure . . I’ve bootstrapped the application already using SvelteKit and pnpm create. This is a work in progress! Hello, World! . Things I need to learn . How to use the Spotify API client | Svelte syntax | .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/ap/2022/09/11/create-perf-task.html",
            "relUrl": "/markdown/csp/ap/2022/09/11/create-perf-task.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Code.org Blog",
            "content": "Link . Here’s the link to our AppLab project: https://studio.code.org/… . Initial Thinking . Alex and I want to build a quiz application that is user-friendly and easy to code. We want to avoid repetitive code so that we can have the most efficient programming experience. Our plan is to create an app that can support the selection of different quizzes given a dropdown selection. We want it to have 4 choices on each answer screen with only one correct answer. We also want to have a final screen which displays the score out of 3 as well as a percentage. There should be a way to go back to the main screen to retake a quiz or take the other quiz. Finally, there should be a “How to Play” screen for anyone confused about where to start. . Design Work . Alex and I met up outside of school and did some sketches for the app on an iPad. We decided that we wanted to have a front screen with 3 images and a dropdown to select the quiz. On each question, we wanted to have a text box for the current quiz question and a 2x2 grid to display the answer choices with images and labels. We also planned out a score page that showed how many questions they got right out of 3 and percent accuracy with which they completed the quiz. The how to play screen was something Alex designed on the fly by himself since we didn’t originally plan it but we wanted to add more features. . Creation . . Alex and I used the JavaScript editor for quite a bit of our code. We used it to define the basketball and tennis quizzes in JavaScript objects. We used block coding to define onEvent listeners and setProperty calls because it has useful autocompletion features for the IDs of elements and their respective properties/emitters. . We designed the quiz in such a way that all the questions would live on one screen. When the user clicks the “next” or “submit” button, the following function runs” . function nextQuestion() { if (quiz[question - 1].answers[selected - 1].correct) { correct++; } if (question + 1 === quiz.length) { setProperty(&quot;nextButton&quot;, &quot;text&quot;, &quot;submit&quot;); } else { setProperty(&quot;nextButton&quot;, &quot;text&quot;, &quot;next&quot;); } setProperty(&quot;label&quot; + selected, &quot;text-color&quot;, &quot;white&quot;); if (question === quiz.length) { finish(); return; } question++; updateImages(); updateQuestion(); updateChoices(); selected = null; } . This function will set the label text, image sources, and question text to the next question without having to switch screens, avoiding repeated element creation and centralizing all the quiz logic in a single function. Additionally, it reduces the amount of event listeners being created (1 for each of the total 4 images). . Program Purpose &amp; Function . A quiz to assess the user’s knowledge of tennis and basketball | Should display the user’s score at the end to show their understanding | . Data Abstraction . Definition of the tennis and basketball variables containing objects representing the quizzes for each sport | Separated from functions that are actually using the data | . Managing Complexity . Use of a single screen to display all quiz questions using “containers” for images, the question, and the answer labels Setting certain properties on these based on the current question to show the correct information | Creation of functions to abstract away logic for changing each of these individual parts of the quiz screen | . | . Procedural Abstraction . Use of functions to update images, questions, and choices | Use of function to abstract away quiz logic and execute the correct quiz based on user | Use of function to set the current selected answer choice Changes previously selected answer label’s color, sets newly selected answer label’s color, and sets the current selected answer choice in a global variable | . | . Algorithm Implementation . Creation of a nextQuestion algorithm that procedurally fills in the correct question, labels, and answer choices for each quiz question Handles answer choice colors, text value of the “next” button (changes to “submit” for the last question) | Handles quiz ending scenario | . | . Testing . Use of console.log to debug unwanted behavior | Use of console.log to test the scoring feature Logged each correct answer, incorrect answer, and overall score | . | .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/codeorg/app/2022/09/11/code-org-blog.html",
            "relUrl": "/markdown/csp/codeorg/app/2022/09/11/code-org-blog.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Markdown Table",
            "content": "Fetch commits from GitHub&#39;s REST API . The following generates a markdown table from the latest commits on the GitHub repository hosting this FastPages site. We&#39;re generating the table the &quot;lazy programmer way&quot; - Mr. Mort, 2022. . import requests r = requests.get(&quot;https://api.github.com/repos/safinsingh/fastpages-apcsp/commits&quot;) commits = r.json() print(&quot;| commit name | hash | date &amp; time |&quot;) print(&quot;|-||-|&quot;) for commit in commits: print(&quot;| {} | {} | {} |&quot;.format( commit[&quot;commit&quot;][&quot;message&quot;], commit[&quot;sha&quot;][0:7], commit[&quot;commit&quot;][&quot;committer&quot;][&quot;date&quot;] )) . | commit name | hash | date &amp; time | |-||-| | feat: python lists | 9eafeb2 | 2022-09-02T21:19:33Z | | customization | 99bd269 | 2022-08-29T07:14:00Z | | customize index page | 8875f0e | 2022-08-29T07:00:52Z | | Fix image URLs | 93f40fb | 2022-08-29T06:57:23Z | | apel, physics, tags | 116e67e | 2022-08-29T06:51:20Z | | add docx files and vocab | dab640b | 2022-08-29T06:26:32Z | | bash tool setup | 9c75118 | 2022-08-29T06:05:04Z | | python quiz | 1060334 | 2022-08-29T04:47:04Z | | extra info | 7757f39 | 2022-08-22T20:06:07Z | | feat: add python &#34;hello&#34; post | 27caf1a | 2022-08-18T06:36:02Z | | feat: create first markdown post &amp; set up local dev w docker-compose | 9ffbfaa | 2022-08-18T06:17:29Z | | bug: set correct baseurl in settings.ini | 2b7dd20 | 2022-08-18T05:38:52Z | | set up custom subdomain | 2771bb6 | 2022-08-18T05:37:00Z | | Merge pull request #1 from safinsingh/fastpages-automated-setup | 76d9ad8 | 2022-08-18T05:33:10Z | | setup repo | 148a60c | 2022-08-18T05:29:55Z | | Initial commit | bbd307a | 2022-08-18T05:29:38Z | . Generated table . commit name hash date &amp; time . feat: python lists | 9eafeb2 | 2022-09-02T21:19:33Z | . customization | 99bd269 | 2022-08-29T07:14:00Z | . customize index page | 8875f0e | 2022-08-29T07:00:52Z | . Fix image URLs | 93f40fb | 2022-08-29T06:57:23Z | . apel, physics, tags | 116e67e | 2022-08-29T06:51:20Z | . add docx files and vocab | dab640b | 2022-08-29T06:26:32Z | . bash tool setup | 9c75118 | 2022-08-29T06:05:04Z | . python quiz | 1060334 | 2022-08-29T04:47:04Z | . extra info | 7757f39 | 2022-08-22T20:06:07Z | . feat: add python &quot;hello&quot; post | 27caf1a | 2022-08-18T06:36:02Z | . feat: create first markdown post &amp; set up local dev w docker-compose | 9ffbfaa | 2022-08-18T06:17:29Z | . bug: set correct baseurl in settings.ini | 2b7dd20 | 2022-08-18T05:38:52Z | . set up custom subdomain | 2771bb6 | 2022-08-18T05:37:00Z | . Merge pull request #1 from safinsingh/fastpages-automated-setup | 76d9ad8 | 2022-08-18T05:33:10Z | . setup repo | 148a60c | 2022-08-18T05:29:55Z | . Initial commit | bbd307a | 2022-08-18T05:29:38Z | . Bonus: current time . The current time (at the time this site was published) is: 2023-04-26T15:28:58-05:00, generated using: . {{ site.time | date_to_xmlschema }} . This code block was rendered using the &quot;raw&quot; attribute, part of the Liquid syntax! .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/jupyter/2022/09/05/markdown-table.html",
            "relUrl": "/jupyter/2022/09/05/markdown-table.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Defining InfoDB . InfoDb = [] . Adding entries to InfoDB . InfoDb.append({ # key-value pairs &quot;name&quot;: &quot;Safin Singh&quot;, &quot;age&quot;: 16, &quot;phone&quot;: &quot;858-XXX-XXXX&quot;, # interests is a list of strs &quot;interests&quot;: [&quot;tennis&quot;, &quot;programming&quot;], # grades is a dict &quot;grades&quot;: { &quot;APCSP&quot;: &quot;A&quot;, &quot;APEL&quot;: &quot;A&quot;, &quot;AP Physics&quot;: &quot;A&quot;, &quot;AP Stats&quot;: &quot;A&quot; } }) InfoDb.append({ &quot;name&quot;: &quot;Alex Kumar&quot;, &quot;age&quot;: 16, &quot;phone&quot;: &quot;858-XXX-XXXX&quot;, &quot;interests&quot;: [&quot;basketball&quot;], &quot;grades&quot;: { &quot;APCSP&quot;: &quot;A&quot;, &quot;APEL&quot;: &quot;A&quot;, &quot;AP Physics&quot;: &quot;A&quot;, &quot;AP Calculus BC&quot;: &quot;A&quot; } }) InfoDb.append({ &quot;name&quot;: &quot;Kalani Cabral-Omana&quot;, &quot;age&quot;: 16, &quot;phone&quot;: &quot;619-XXX-XXXX&quot;, &quot;interests&quot;: [&quot;soccer&quot;, &quot;surfing&quot;], &quot;grades&quot;: { &quot;APCSP&quot;: &quot;A&quot;, &quot;APEL&quot;: &quot;B&quot;, &quot;AP Physics&quot;: &quot;B&quot;, &quot;AP Stats&quot;: &quot;A&quot; } }) InfoDb.append({ &quot;name&quot;: &quot;Navan Yatavelli&quot;, &quot;age&quot;: 15, &quot;phone&quot;: &quot;858-XXX-XXXX&quot;, &quot;interests&quot;: [&quot;football&quot;, &quot;walking my dog&quot;], &quot;grades&quot;: { &quot;APCSP&quot;: &quot;A&quot;, &quot;American Lit&quot;: &quot;A&quot;, &quot;AP Stats&quot;: &quot;A&quot;, &quot;AP Bio&quot;: &quot;A&quot; } }) . Printing InfoDB . def format_entry(entry): # use format string to print entries print(&quot;&quot;&quot;{} Age: {} Phone: {} Interests: {} Grades:&quot;&quot;&quot;.format(entry[&quot;name&quot;], entry[&quot;age&quot;], entry[&quot;phone&quot;], &quot;, &quot;.join(entry[&quot;interests&quot;]))) # loop through classes to print each individual grade for cl, grade in entry[&quot;grades&quot;].items(): print(&quot; {}: {}&quot;.format(cl, grade)) print() # loop through each entry in InfoDb by value for entry in InfoDb: format_entry(entry) . For loop with index . for i in range(len(InfoDb)): # access the element at index i of InfoDb format_entry(InfoDb[i]) . While loop . i = 0 # cap the loop at len(InfoDb) runs n = len(InfoDb) # while the counter is less than list length... while i &lt; n: # print entry at index i format_entry(InfoDb[i]) # increment counter i+=1 . Recursion . n = len(InfoDb) # define recursive function def printer(i): # if you are at the end of the list, quit if i == n: return # print entry at index i format_entry(InfoDb[i]) # call function with the next index printer(i+1) # call function starting at index 0 printer(0) . Adding an entry to InfoDB with user input . name = input(&quot;What&#39;s your name? &quot;) age = int(input(&quot;How old are you? &quot;)) phone = input(&quot;What&#39;s your phone number? &quot;) # get interests as a comma-separated list and split on the comma interests = input(&quot;What are your interests (comma-separated)? &quot;).split(&quot;,&quot;) # see above classes = input(&quot;What classes are you in (comma-separated)? &quot;).split(&quot;,&quot;) grades = input( &quot;What are your grades in each of your respective classes (comma-separated)? &quot;).split(&quot;,&quot;) # transform both arrays into an array of tuples and then to a dict class_grades = dict(zip(classes, grades)) InfoDb.append({ &quot;name&quot;: name, &quot;age&quot;: age, &quot;phone&quot;: phone, &quot;interests&quot;: interests, &quot;grades&quot;: class_grades }) . My partner&#39;s list . InfoDb = [] InfoDb.append({ &quot;FirstName&quot;: &quot;samit&quot;, &quot;LastName&quot;: &quot;poojary&quot;, &quot;DOB&quot;: &quot;September 15&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;samit.poojary@gmail.com&quot;, &quot;Phone&quot;: &quot;iphone&quot; }) #adding extra records to InfoDb InfoDb.append({ &quot;FirstName&quot;: &quot;Safin&quot;, &quot;LastName&quot;: &quot;Singh&quot;, &quot;DOB&quot;: &quot;July 13&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;safin.singh@gmail.com&quot;, &quot;Phone&quot;: &quot;android&quot; }) # adding extra records InfoDb.append({ &quot;FirstName&quot;: &quot;Alex&quot;, &quot;LastName&quot;: &quot;Kumar&quot;, &quot;DOB&quot;: &quot;May 9&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;alex.k.kumar@gmail.com&quot;, &quot;Phone&quot;: &quot;iphone&quot; }) # Adding one extra item to InfoDb InfoDb.append({ &quot;FirstName&quot;: &quot;Maxie&quot;, &quot;LastName&quot;: &quot;Kumar&quot;, &quot;DOB&quot;: &quot;November 5&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;maxie.kumar@gmail.com&quot;, &quot;Phone&quot;: &quot;no phone&quot; }) . Modified format_entry for Alex&#39;s list . def format_entry(entry): # use format string to print entries print(&quot;&quot;&quot;{} {} Date of Birth: {} Residence: {} Email: {} Phone:&quot;&quot;&quot;.format( entry[&quot;FirstName&quot;], entry[&quot;LastName&quot;], entry[&quot;DOB&quot;], entry[&quot;Residence&quot;], entry[&quot;Email&quot;], entry[&quot;Phone&quot;] )) . A quiz using &quot;a list of dictionaries&quot; (?) . def ask(qna): # get question and answer from qna dictionary question = qna.keys()[0] # get user input res = input(question + &quot; &quot;) # make comparison case-insensitive (given our answers are lowercase) if res.lower() == qna[question]: # use string interpolation to print a correct anser print(&quot;&#39;{}&#39; is the correct answer!&quot;.format(res)) return True else: # prompt the user to try again if they want to again = input(&quot;&#39;{}&#39; is incorrect. Try again? [y/N] &quot;.format(res)) if again == &quot;y&quot;: # recursively call &quot;ask&quot; function for the retry feature return ask(qna) else: return False questions_and_answer = [ # questions taken from previous quiz {&quot;What command is used to include other functions that were previously developed?&quot;: &quot;import&quot;}, {&quot;What command is used to evaluate correct or incorrect response in this example?&quot;: &quot;if&quot;}, {&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;: &quot;expression&quot;}, {&quot;The two possible boolean values in Python are true and &#39;____&#39;.&quot;: &quot;false&quot;}, {&quot;Python is a(n) [interpreted/compiled] language.&quot;: &quot;interpreted&quot;}, {&quot;A &#39;___&#39; loop can iterate over items in a list.&quot;: &quot;for&quot;}, {&quot;What keyword can be used to create a block that can catch and handle an exception?&quot;: &quot;try&quot;}, {&quot;A function &#39;________&#39; allows the programmer to specify additional info to a function.&quot;: &quot;parameter&quot;}, {&quot;The &#39;def&#39; keyword is used when defining a &#39;________&#39;.&quot;: &quot;function&quot;}, {&quot;The &#39;_&#39; operator can be used to concatenate two strings.&quot;: &quot;+&quot; } ] # counter for the total correct answers correct = 0 # loop over all items in the questions_and_answers list for qna in questions_and_answer: if ask(qna): # increment the counter if the user gets something correct correct += 1 # display the total score at the end with an encouraging message print(&quot;Great job! You got a score of {}%.&quot;.format( int(100 * correct / len(questions_and_answer)))) . Print list backwards . for entry in InfoDb[::-1]: format_entry(entry) .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "Apel Extra Credit",
            "content": "Safin Singh . Dafoe . APEL . 21 August 2022 . Stein Precis EC . In his Op-Ed, “We’re teaching kids to follow their dreams. Maybe teach them to be helpful instead,” Joel Stein argues that today’s children are encouraged to merely display the values of grit and determination rather than truly make a difference in our society. In one instance, Stein uses parallelism to show that influential figures did not focus on the fact that what they were doing was just or revolutionary, but rather that the outcome affected them and the cause they cared about. He writes, “Ruth Bader Ginsburg did not toil to be one of the first female Supreme Court justices; she fought to expand the rights of all women… If Malala had actually been in that classroom listening to how she pursued her dream like some YouTube influencer, she would have rescinded the right of girls to go to this school.” Ginsburg and Malala are both remarkable individuals in their own right, but the use of parallelism is intended to emphasize the fact that neither of them did it with the intent of being awarded or achieving something. Stein initially states what their goal was not and then transitions into the real effects of their work or what it would have been if they were going for a certain title. By writing in this fashion, Stein undermines those who praise the ideas of working solely for their personal benefit because both sentences first refute that point of view. In another excerpt, the author uses absolute language to further attack this mindset: “If we can’t stress to our kids the importance of helping other people while they are enacting stories about helping other people, we are in trouble. We’ll wind up with a nation of adults who only see others as obstacles.” The use of the word “only” is quite extreme but its purpose is to amplify the issues with the belief that hard work is an ideal that must be attained rather than simply part of a larger, more impactful goal. Stein establishes a fairly harsh tone in these sentences as he seems to be frustrated with the attitude that we have instilled in a majority of our younger generation. This tone also seems to have been meant to upset the reader in such a way that they feel like they should make a change in the way they view the issue because of the potential detrimental effects it could have on our future. Overall, Stein expresses the challenges he personally sees in his son’s classroom regarding teaching students how to be an active and helpful person rather than simply praising “good qualities” such as determination. Using rhetorical strategies such as parallelism and absolute language, he intends to convince the reader of the fact that we must change our outlook on educating our children. .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/2022/08/29/APEL-Extra-Credit.html",
            "relUrl": "/2022/08/29/APEL-Extra-Credit.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "Ap Physics Lab",
            "content": "Safin Singh . Liao . AP Physics C . 18 August 2022 . Problem Statement . Purpose: Determine the relationship between the mass and radius of disks with a common thickness and density but different radii. Calculate the uncertainty associated with the relationship. . Materials and Equipment . Step 4: Since the Area of the disk is a circle, substitute equation 3 into equation 2 and solve for m. . (m = rho cdot pi r^{2}h) . Procedure . The mass of the disk can be measured using the balance. In order to do so, the balance must first be zeroed and then the disk should be placed on the balance. . | The radius of the disk can be measured using the meter stick. One end of the meter stick will be placed at the center of the disk and it will be extended towards the outside edge of the circle. . The precision of the meter stick we used was 1mm (0.1cm) because that was the smallest marking on the meter stick that we used. Our measurements are recorded to the hundredth of a centimeter (nearest 0.1mm) because we used the 2/5/8 rule to add one more digit of precision to each radius measurement. . | Data table: . | Radius (cm) Mass (g)   Radius2 (cm2 ) . 6.92 | 0.71 |   | 47.89 | . 5.32 | 0.37 |   | 28.30 | . 4.12 | 0.25 |   | 16.97 | . 3.08 | 0.13 |   | 9.49 | . 2.28 | 0.08 |   | 5.20 | . Nonlinear regression . | . Is this graph linear or nonlinear? Nonlinear . Equation: y = 0.0199151x2 - 0.0499334x + 0.095349 . Linear regression . | . Equation: y = 0.0146174x - 0.00729059 . | Analysis Questions . The independent variable best represents the radius squared because the mass is linearly correlated to the radius squared. . | The slope represents the increase in mass for every increase in radius2 by 1cm2. . | Yes, the line of best fit(s) should be adjusted to pass through (0, 0) because a disk with radius 0 centimeters should have a mass of 0 grams. . | Measured value of disk thickness: 0.00125 cm . | Slope of best fit line: 0.0146174 g/cm2 . ( rho cdot pi h = 0.0146174) . ( rho cdot 3.14 cdot 0.00125 = 0.0146174) . ( rho = 3.72417834 approx 3.72g/cm^{3}) . Actual density of aluminum: 2.7 g/cm3 . % Error: ( frac{3.72 g/cm^{3} - 2.7g/cm^{3}}{2.7g/cm^{3}} times 100 % = 37.78 % approx 38 %) . Some of the factors that could have caused error are: . The disks may not have been cut in perfect circles, causing inconsistencies in disk weight . | The thinness of each disk made it very difficult to measure with the provided ruler, causing the calculation for density to be very off . | | Our percent error is positive because the measurement for disk thickness is likely inaccurate since we did not have a precise way to measure it. This caused a higher-than-expected density, leading to a positive percentage error. . Synthesis Questions . If we had chosen disks with greater thickness, the slope of the line would increase. This is because if the radius of a disk is kept constant while its thickness increases, its mass will increase because there is simply more of the material in the disk. As a result, the slope of the line would increase. However, the experimental density would remain the same, as the increase in thickness would be accounted for in the increased slope, so the (p cdot pi h = slope) equation used to determine density (( rho)) would yield the same value for density. Something to note is that a more thick disk may have been easier to find a more accurate height for, leading to a more precise calculation for density. . | The density of steel is larger than that of aluminum, coming out to 7.85 g/cm3 compared to aluminum’s 2.7 g/cm3. . | The following graph represents what a line of best fit would look like for Mass (g) vs Radius2 (cm2) for both steel and aluminum (see next page). . . Based on the equation (m = rho cdot pi r^{2}h), it is known that density and mass are linearly proportional. Therefore, in order to draw a line of best fit for steel disks, I simply multiplied each measured mass value for the aluminum disks by the constant ( frac{7.85}{2.7}), which represents the ratio between the density of steel to the density of aluminum. From there, I plotted a linear regression line for this new adjusted data, yielding the above graph. . (slope = rho cdot pi h) . | ( rho = frac{ text{slope}}{ pi h}) . (slope = 122 frac{ text{kg}}{m^{2}} cdot ( frac{1m}{100cm})^{2} cdot ( frac{1000g}{1kg}) = 12.2 frac{g}{cm^{2}}) . (h = 0.5cm) . ( rho = frac{12.2g/cm^{2}}{3.14 cdot 0.5cm} approx 7.77 frac{g}{cm^{3}}) . The calculated density is closest to that of iron, which has a density of 7.8 g/cm3. Therefore, the group’s disks are likely made of iron. . Multiple Choice . (m = rho cdot pi r^{2}h) . | (c = 2 pi r) . (r = frac{c}{2 pi}) . (m = rho cdot pi({ frac{c}{2 pi})}^{2}h) . (m = rho cdot frac{c^{2}}{4 pi}h = c^{2} cdot frac{1}{4 pi}h cdot rho) . (slope = frac{m}{c^{2}} = frac{h rho}{4 pi}) . Therefore, the correct answer is E. . N/A . | ( rho = frac{m}{V}) . | (m = rho V) . (V = frac{4 pi}{3}r^{3}) . (m = rho cdot frac{4 pi}{3}r^{3}) where both ( rho) and ( frac{4 pi}{3}) are constants. Therefore, in order to create a linear graph relating the mass of a sphere to its radius r, the student would need to plot mass m vs r3. Therefore, the correct answer is C. .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/2022/08/29/AP-Physics-Lab.html",
            "relUrl": "/2022/08/29/AP-Physics-Lab.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "APEL Notebook",
            "content": "Just finished working on my APEL notebook covers, here is what they look like: . .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/apel/2022/08/28/apel-notebook.html",
            "relUrl": "/apel/2022/08/28/apel-notebook.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "Bash tools setup",
            "content": "Ensure that your tools are installed with Bash . checkTool() { echo &quot;Checking if $1 is installed...&quot; # evaluate check command and check its exit code if eval &quot;$2&quot;; then echo &quot;Success! $1 is installed.&quot; else echo &quot;Error: $1 is not installed properly!&quot; fi echo } checkKernel() { echo &quot;Checking if the $1 Jupyter kernel is installed...&quot; # check if kernel is listed in current kernelspec if jupyter kernelspec list | grep --color=never &quot;$1&quot;; then echo &quot;Success! the $1 Jupyter kernel is installed.&quot; else echo &quot;Error: the $1 Jupyter kernel is not installed properly!&quot; fi echo } checkTool &quot;conda&quot; &quot;conda --version&quot; checkTool &quot;jupyter&quot; &quot;conda list | grep jupyter | head -n 1&quot; checkKernel &quot;bash&quot; checkKernel &quot;javascript&quot; checkKernel &quot;python&quot; . Checking if conda is installed... conda 4.13.0 Success! conda is installed. Checking if jupyter is installed... jupyter 1.0.0 py39h06a4308_7 Success! jupyter is installed. Checking if the bash Jupyter kernel is installed... bash /home/user/.local/share/jupyter/kernels/bash Success! the bash Jupyter kernel is installed. Checking if the javascript Jupyter kernel is installed... javascript /home/user/.local/share/jupyter/kernels/javascript Success! the javascript Jupyter kernel is installed. Checking if the python Jupyter kernel is installed... python3 /home/user/anaconda3/share/jupyter/kernels/python3 Success! the python Jupyter kernel is installed. . Updating a repository with Bash . # change into a git-initialized directory cd /home/user/projects/apcsp || exit # pull from remote git pull # stage files for comitting git add . # commit with a message git commit -m &quot;feat: added stuff&quot; # push changes to remote origin on branch master git push origin master . Automating Jupyter &amp; Jupyter kernel installation . failedto() { echo &quot;Failed to $1. Please manually debug any errors printed to STDERR.&quot; exit } if ! jupyter &amp;&gt;/dev/null; then failedto &quot;ensure that Jupyter was installed&quot; fi { echo &quot;Installing Jupyter bash kernel...&quot; pip install bash_kernel python -m bash_kernel.install } || failedto &quot;install bash kernel&quot; { echo &quot;Installing Jupyter node kernel...&quot; npm install --global ijavascript ijsinstall } || failedto &quot;install node kernel&quot; echo &quot;Both the bash and javascript (via NodeJS) kernels have been installed!&quot; .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/jupyter/2022/08/26/tools-setup.html",
            "relUrl": "/jupyter/2022/08/26/tools-setup.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "Python Quiz",
            "content": "You can use the following quiz to test your Python knowledge! . def ask(qna): # destructure qna tuple question, answer = qna # get user input res = input(question + &quot; &quot;) # make comparison case-insensitive (given our answers are lowercase) if res.lower() == answer: # use string interpolation to print a correct anser print(&quot;&#39;{}&#39; is the correct answer!&quot;.format(res)) return True else: # prompt the user to try again if they want to again = input(&quot;&#39;{}&#39; is incorrect. Try again? [y/N] &quot;.format(res)) if again == &quot;y&quot;: # recursively call &quot;ask&quot; function for the retry feature return ask(qna) else: return False questions_and_answers = [ # Pre-written questions (&quot;What command is used to include other functions that were previously developed?&quot;, &quot;import&quot;), (&quot;What command is used to evaluate correct or incorrect response in this example?&quot;, &quot;if&quot;), (&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;, &quot;expression&quot;), # My own questions (&quot;The two possible boolean values in Python are true and &#39;____&#39;.&quot;, &quot;false&quot;), (&quot;Python is a(n) [interpreted/compiled] language.&quot;, &quot;interpreted&quot;), (&quot;A &#39;___&#39; loop can iterate over items in a list.&quot;, &quot;for&quot;), (&quot;What keyword can be used to create a block that can catch and handle an exception?&quot;, &quot;try&quot;), # Questions for the document (&quot;A function &#39;________&#39; allows the programmer to specify additional info to a function.&quot;, &quot;parameter&quot;), (&quot;The &#39;def&#39; keyword is used when defining a &#39;________&#39;.&quot;, &quot;function&quot;), (&quot;The &#39;_&#39; operator can be used to concatenate two strings.&quot;, &quot;+&quot;) ] ### MAIN ### print(&quot;Welcome to the Python quiz!&quot;) # counter for the total correct answers correct = 0 # loop over all items in the questions_and_answers list for qna in questions_and_answers: if ask(qna): # increment the counter if the user gets something correct correct += 1 # display the total score at the end with an encouraging message print(&quot;Great job! You got a score of {}%.&quot;.format( int(100 * correct / len(questions_and_answers)))) . Here&#39;s a screenshot of my quiz running as a separate Python file in my terminal to &quot;show workflow of Input and Output in terminal&quot;: .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/jupyter/2022/08/26/python-quiz.html",
            "relUrl": "/jupyter/2022/08/26/python-quiz.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "My interests",
            "content": "I enjoy playing tennis and my favorite class at this school is APCSP! I love to code and I can’t wait to take this class! . “Knowledge is power.” – Francis Bacon . if (brain != empty) { keepCoding(); } else { orderCoffee(); } . I love to code code code! . i hate coffee .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/2022/08/22/my-interests.html",
            "relUrl": "/markdown/csp/2022/08/22/my-interests.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "Basic Python Jupyter notebook",
            "content": "Python . Just a basic hello with Python . print(&quot;Hello&quot;) . Hello .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/jupyter/2022/08/18/python-hello.html",
            "relUrl": "/jupyter/2022/08/18/python-hello.html",
            "date": " • Aug 18, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "Week 0 Post",
            "content": "Example Markdown Post . Markdown is pretty cool. Here are some examples of what it can do! . My favorite foods . Pizza | Pasta | Ramen | . My favorite colors (in order) . White | Green | Red | Here is some additional formatting and an image: . . This is the VSCode logo (and this is a blockquote) .",
            "url": "https://safinsingh.github.io/fastpages-apcsp/markdown/csp/2022/08/17/week-0-post.html",
            "relUrl": "/markdown/csp/2022/08/17/week-0-post.html",
            "date": " • Aug 17, 2022"
        }
        
    
  

  
  

  

  

  
  

  

  
  

  

  
      ,"page7": {
          "title": "Vocab",
          "content": "Here are some general CS terms and their definitions, with my own info and some terms exported from this Quizlet and formatted using Markdown. . Term Definition . Algorithm | At its core, an algorithm is really just a generalized, conceptual solution to a problem that can later be implemented in some real-world form like a computer program. | . Application Program Interface | Application program interface (API) is a set of routines, protocols, and tools for constructing software applications. An API specifies how software components should interact. In addition, APIs are used when programming graphical user interface (GUI) components. | . Binary | A numeric system of base 2 that only uses combinations of the digits zero and one; this is used in one of the lowest levels of abstraction. Computers operate in binary, as they store data and perform calculations using only zeros and ones. While a single binary digit can be used to represent True (1) or False (0) in boolean logic, multiple binary digits can be used in conjunction to store large numbers and perform complex functions. Computers translate between binary and what you actually work with such as numbers and text. | . Binary Search | A search algorithm that locates the position of a target value within a sorted array by repeatedly dividing the search interval in half; can only be used when the list is sorted. Because of its divide-and-conquer approach, the amount of work required to find an item grows much more slowly with Binary Search than with Sequential Search. In fact, with this logarithmic behavior | . Boolean Function* | Any function based on the operations AND, OR, and NOT, and whose elements are from the domain of Boolean algebra. A function whose arguments, as well as the function itself, assume values from a two-element set (usually {0,1}) | . Central Processing Unit | CPU, or processor, is the brains of the computer where most calculations take place. Contains the circuitry necessary to interpret and execute program instructions. | . Computational Artifact | Something created by a human using a computer and can be, but is not limited to, a program, an image, an audio, a video, a presentation, or web page file | . Cryptography | The science of coding and decoding messages in order to keep them secure. Coding takes place using a key that ideally is known only by the sender and intended recipient of the message. | . Floating Point Numbers | As the name implies, floating point numbers are numbers that contain floating decimal points. Examples include, the numbers 5.5, 0.001, and -2,345.6789. Numbers without decimal places are called integers. Computers recognize real numbers that contain fractions as floating point numbers. | . Hexadecimal | Hexadecimal describes a base-16 number system. That is, it describes a numbering system containing 16 sequential numbers as base units (including 0) before adding a new position for the next number. The hexadecimal numbers are 0-9 and then use the letters A-F. Used to represent digital data because it utilizes fewer digits than binary. | . Integers | An integer is a whole number (not a fraction) that can be positive, negative, or zero. In computer science, an integer is a datum of integral data type, a data type that represents some finite subset of the mathematical integers. Integral data types may be of different sizes and may or may not be allowed to contain negative values. | . Iterations | Iteration is the repetition of part of an algorithm until a condition is met or for a specified number of times. This is often called a ‘loop’. Recursive functions repeatedly execute themselves as part of their operation. Upon completing all instructions and resetting to the first one iteration has been completed. | . Libraries | In computer science, a library is a collection of non-volatile resources that a program can use often to develop software. Libraries are particularly useful for storing frequently used routines because you do not need to explicitly link them to every program that uses them. The linker automatically looks in libraries for routines that it does not find elsewhere. Resources which may be found in libraries include data, documentation, message templates, pre-written code, classes, or values. | . Linear/Sequential Search | A process that checks every element in the list sequentially until the desired element is found or all elements have been searched. Can be used in any type of list. Has linear performance. | . Lossless Data Compression | With lossless compression, every single bit of data that was originally in the file remains after the file is uncompressed. All of the information is completely restored. This is generally the technique of choice for text or spreadsheet files, where the loss of words or financial data could pose a problem. PNG is an image format that provides lossless compression. | . Lossy Data Compression | Lossy compression reduces a file by permanently eliminating certain information, especially redundant information. When the file is uncompressed, only a part of the original information is still there (although the user may not notice it). Lossy compression is generally used for video and sound, where a certain amount of information loss will not be detected by most users. JPEG provides lossy compression. | . Metadata | Metadata is data that describes other data. Metadata summarizes basic information about data, which can make finding and working with particular instances of data easier. It provides information concerning an item’s content such as image resolution and size. | . Pseudocode | Pseudocode is a detailed yet readable description of what a computer program or algorithm must do. It may also describe an operating principle. It is expressed in a formally-styled natural language rather than in a programming language intended for humans. The conventions of normal programming continue. | . Sequencing | The execution of each step/action of an algorithm in the precise order in which the statements are given. | .",
          "url": "https://safinsingh.github.io/fastpages-apcsp/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  

  

  

  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://safinsingh.github.io/fastpages-apcsp/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}